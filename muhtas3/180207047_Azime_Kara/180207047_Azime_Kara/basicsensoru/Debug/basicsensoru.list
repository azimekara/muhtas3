
basicsensoru.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae4  08009ae4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aec  08009aec  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000088c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000924  20000924  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ecd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c6c  00000000  00000000  00039f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001230  00000000  00000000  0003ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ac6  00000000  00000000  000401c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aaed  00000000  00000000  00064c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdde9  00000000  00000000  0007f77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d564  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000550c  00000000  00000000  0014d5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a50 	.word	0x08009a50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009a50 	.word	0x08009a50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <get_function>:

}*/


void get_function(float* temperature, float* humidity)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
	HAL_Delay(1000);
 80004d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004da:	f000 ff77 	bl	80013cc <HAL_Delay>
	uint8_t a = temp;
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <get_function+0x80>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	75fb      	strb	r3, [r7, #23]
	temp=*temperature;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	edd3 7a00 	vldr	s15, [r3]
 80004ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80004f2:	793b      	ldrb	r3, [r7, #4]
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <get_function+0x80>)
 80004f8:	701a      	strb	r2, [r3, #0]

	bol[0]='*';
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <get_function+0x84>)
 80004fc:	222a      	movs	r2, #42	; 0x2a
 80004fe:	701a      	strb	r2, [r3, #0]

	//txbuf[0]=yeni_temp[0];
	//txbuf[1]=bol[0];
	//txbuf[2]=yeni_hum[0];

	if(temp == a)
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <get_function+0x80>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	7dfa      	ldrb	r2, [r7, #23]
 8000506:	429a      	cmp	r2, r3
 8000508:	d004      	beq.n	8000514 <get_function+0x48>

	}

	else
	{
		txbuf[0]=temp;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <get_function+0x80>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <get_function+0x88>)
 8000512:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart3, (uint8_t*)txbuf, 1, 3000);
	}

	uint8_t b = hum;
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <get_function+0x8c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	75bb      	strb	r3, [r7, #22]
	hum=*humidity;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	edd3 7a00 	vldr	s15, [r3]
 8000520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000524:	edc7 7a01 	vstr	s15, [r7, #4]
 8000528:	793b      	ldrb	r3, [r7, #4]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <get_function+0x8c>)
 800052e:	701a      	strb	r2, [r3, #0]

	if(hum == b)
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <get_function+0x8c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	7dba      	ldrb	r2, [r7, #22]
 8000536:	429a      	cmp	r2, r3
 8000538:	d003      	beq.n	8000542 <get_function+0x76>

	}

	else
	{
		yeni_hum[0]=hum;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <get_function+0x8c>)
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <get_function+0x90>)
 8000540:	701a      	strb	r2, [r3, #0]

	//yeni_temp[1]=(temp-yeni_temp[0])*10;
	//yeni_hum[1]=(hum-yeni_hum[0])*10;


}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000220 	.word	0x20000220
 8000550:	20000228 	.word	0x20000228
 8000554:	20000214 	.word	0x20000214
 8000558:	20000221 	.word	0x20000221
 800055c:	20000224 	.word	0x20000224

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fec0 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f8ee 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 fa14 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000570:	f000 f954 	bl	800081c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000574:	f000 f980 	bl	8000878 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000578:	f000 f9ae 	bl	80008d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800057c:	f008 fe20 	bl	80091c0 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 8000580:	f000 f9e0 	bl	8000944 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) rxbuf, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	4965      	ldr	r1, [pc, #404]	; (800071c <main+0x1bc>)
 8000588:	4865      	ldr	r0, [pc, #404]	; (8000720 <main+0x1c0>)
 800058a:	f005 faf5 	bl	8005b78 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if(HAL_I2C_IsDeviceReady(&hi2c1,136,1,100)==HAL_OK){
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	2201      	movs	r2, #1
 8000592:	2188      	movs	r1, #136	; 0x88
 8000594:	4863      	ldr	r0, [pc, #396]	; (8000724 <main+0x1c4>)
 8000596:	f003 fab3 	bl	8003b00 <HAL_I2C_IsDeviceReady>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d119      	bne.n	80005d4 <main+0x74>
			sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 80005a0:	4a61      	ldr	r2, [pc, #388]	; (8000728 <main+0x1c8>)
 80005a2:	4962      	ldr	r1, [pc, #392]	; (800072c <main+0x1cc>)
 80005a4:	4862      	ldr	r0, [pc, #392]	; (8000730 <main+0x1d0>)
 80005a6:	f000 fba9 	bl	8000cfc <sht3x_read_temperature_and_humidity>

			sht3x_set_header_enable(&handle, true);
 80005aa:	2101      	movs	r1, #1
 80005ac:	4860      	ldr	r0, [pc, #384]	; (8000730 <main+0x1d0>)
 80005ae:	f000 fc23 	bl	8000df8 <sht3x_set_header_enable>
			HAL_Delay(500);
 80005b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b6:	f000 ff09 	bl	80013cc <HAL_Delay>
			sht3x_set_header_enable(&handle, false);
 80005ba:	2100      	movs	r1, #0
 80005bc:	485c      	ldr	r0, [pc, #368]	; (8000730 <main+0x1d0>)
 80005be:	f000 fc1b 	bl	8000df8 <sht3x_set_header_enable>
			// Read temperature and humidity again.
			sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 80005c2:	4a59      	ldr	r2, [pc, #356]	; (8000728 <main+0x1c8>)
 80005c4:	4959      	ldr	r1, [pc, #356]	; (800072c <main+0x1cc>)
 80005c6:	485a      	ldr	r0, [pc, #360]	; (8000730 <main+0x1d0>)
 80005c8:	f000 fb98 	bl	8000cfc <sht3x_read_temperature_and_humidity>
			get_function(&temperature,&humidity);
 80005cc:	4956      	ldr	r1, [pc, #344]	; (8000728 <main+0x1c8>)
 80005ce:	4857      	ldr	r0, [pc, #348]	; (800072c <main+0x1cc>)
 80005d0:	f7ff ff7c 	bl	80004cc <get_function>
		}
		//fan
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_SET)
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4856      	ldr	r0, [pc, #344]	; (8000734 <main+0x1d4>)
 80005da:	f001 f9c9 	bl	8001970 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d106      	bne.n	80005f2 <main+0x92>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	4853      	ldr	r0, [pc, #332]	; (8000738 <main+0x1d8>)
 80005ec:	f001 f9d8 	bl	80019a0 <HAL_GPIO_WritePin>
 80005f0:	e005      	b.n	80005fe <main+0x9e>

		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	484f      	ldr	r0, [pc, #316]	; (8000738 <main+0x1d8>)
 80005fa:	f001 f9d1 	bl	80019a0 <HAL_GPIO_WritePin>
		}

		//HAL_UART_Receive(&huart3, (uint8_t*)rxbuf, 1, 100);

		//lamba
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_SET)
 80005fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000602:	484c      	ldr	r0, [pc, #304]	; (8000734 <main+0x1d4>)
 8000604:	f001 f9b4 	bl	8001970 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d106      	bne.n	800061c <main+0xbc>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4847      	ldr	r0, [pc, #284]	; (8000734 <main+0x1d4>)
 8000616:	f001 f9c3 	bl	80019a0 <HAL_GPIO_WritePin>
 800061a:	e005      	b.n	8000628 <main+0xc8>

		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	4844      	ldr	r0, [pc, #272]	; (8000734 <main+0x1d4>)
 8000624:	f001 f9bc 	bl	80019a0 <HAL_GPIO_WritePin>

		}

		//ldr
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8)==GPIO_PIN_SET)
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4841      	ldr	r0, [pc, #260]	; (8000734 <main+0x1d4>)
 800062e:	f001 f99f 	bl	8001970 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d105      	bne.n	8000644 <main+0xe4>
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	483f      	ldr	r0, [pc, #252]	; (800073c <main+0x1dc>)
 800063e:	f001 f9af 	bl	80019a0 <HAL_GPIO_WritePin>
 8000642:	e004      	b.n	800064e <main+0xee>
		}
		else
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	483c      	ldr	r0, [pc, #240]	; (800073c <main+0x1dc>)
 800064a:	f001 f9a9 	bl	80019a0 <HAL_GPIO_WritePin>
		}

		//touch
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_SET)
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	4838      	ldr	r0, [pc, #224]	; (8000734 <main+0x1d4>)
 8000654:	f001 f98c 	bl	8001970 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10b      	bne.n	8000676 <main+0x116>
		{
			//HAL_Delay(2000);
			//txbuf[0]=5;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	4834      	ldr	r0, [pc, #208]	; (8000738 <main+0x1d8>)
 8000666:	f001 f99b 	bl	80019a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4834      	ldr	r0, [pc, #208]	; (8000740 <main+0x1e0>)
 8000670:	f001 f996 	bl	80019a0 <HAL_GPIO_WritePin>
 8000674:	e00a      	b.n	800068c <main+0x12c>
		}
		else
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	482e      	ldr	r0, [pc, #184]	; (8000738 <main+0x1d8>)
 800067e:	f001 f98f 	bl	80019a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	482e      	ldr	r0, [pc, #184]	; (8000740 <main+0x1e0>)
 8000688:	f001 f98a 	bl	80019a0 <HAL_GPIO_WritePin>
		}

		//pır
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_SET)
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	4828      	ldr	r0, [pc, #160]	; (8000734 <main+0x1d4>)
 8000692:	f001 f96d 	bl	8001970 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10b      	bne.n	80006b4 <main+0x154>
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	4825      	ldr	r0, [pc, #148]	; (8000738 <main+0x1d8>)
 80006a4:	f001 f97c 	bl	80019a0 <HAL_GPIO_WritePin>
			//txbuf[0]=6;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4824      	ldr	r0, [pc, #144]	; (8000740 <main+0x1e0>)
 80006ae:	f001 f977 	bl	80019a0 <HAL_GPIO_WritePin>
 80006b2:	e00a      	b.n	80006ca <main+0x16a>
		}
		else
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <main+0x1d8>)
 80006bc:	f001 f970 	bl	80019a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	481e      	ldr	r0, [pc, #120]	; (8000740 <main+0x1e0>)
 80006c6:	f001 f96b 	bl	80019a0 <HAL_GPIO_WritePin>

		}

		//yagmur
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET)
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4819      	ldr	r0, [pc, #100]	; (8000734 <main+0x1d4>)
 80006d0:	f001 f94e 	bl	8001970 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10b      	bne.n	80006f2 <main+0x192>
		{
			//HAL_Delay(2000);
			//txbuf[0]=2;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	4815      	ldr	r0, [pc, #84]	; (8000738 <main+0x1d8>)
 80006e2:	f001 f95d 	bl	80019a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <main+0x1dc>)
 80006ec:	f001 f958 	bl	80019a0 <HAL_GPIO_WritePin>
 80006f0:	e00a      	b.n	8000708 <main+0x1a8>
		}
		else
		{
			//HAL_Delay(2000);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0x1d8>)
 80006fa:	f001 f951 	bl	80019a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <main+0x1dc>)
 8000704:	f001 f94c 	bl	80019a0 <HAL_GPIO_WritePin>
		}

		HAL_UART_Transmit(&huart3, (uint8_t*)txbuf, 1, 1000);
 8000708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070c:	2201      	movs	r2, #1
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <main+0x1e4>)
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <main+0x1c0>)
 8000712:	f005 f99f 	bl	8005a54 <HAL_UART_Transmit>
		/*HAL_UART_Transmit(&huart3, yeni_temp, 1, 1);
		HAL_UART_Transmit(&huart3, (uint8_t*)bol, 1, 1);
		HAL_UART_Transmit(&huart3, yeni_hum, 1, 1);*/

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000716:	f008 fd79 	bl	800920c <MX_USB_HOST_Process>
		if(HAL_I2C_IsDeviceReady(&hi2c1,136,1,100)==HAL_OK){
 800071a:	e738      	b.n	800058e <main+0x2e>
 800071c:	200001ec 	.word	0x200001ec
 8000720:	200001a8 	.word	0x200001a8
 8000724:	200000b4 	.word	0x200000b4
 8000728:	2000021c 	.word	0x2000021c
 800072c:	20000218 	.word	0x20000218
 8000730:	20000000 	.word	0x20000000
 8000734:	40021000 	.word	0x40021000
 8000738:	40020c00 	.word	0x40020c00
 800073c:	40020800 	.word	0x40020800
 8000740:	40020400 	.word	0x40020400
 8000744:	20000214 	.word	0x20000214

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f009 f874 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c6:	2307      	movs	r3, #7
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fa92 	bl	8004cf8 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007da:	f000 fa19 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2105      	movs	r1, #5
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fcf3 	bl	80051e8 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000808:	f000 fa02 	bl	8000c10 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3750      	adds	r7, #80	; 0x50
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C1_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_I2C1_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C1_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2C1_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2C1_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_I2C1_Init+0x50>)
 800085a:	f002 fce9 	bl	8003230 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f9d4 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000b4 	.word	0x200000b4
 8000870:	40005400 	.word	0x40005400
 8000874:	000186a0 	.word	0x000186a0

08000878 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_I2S3_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <MX_I2S3_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MX_I2S3_Init+0x5c>)
 80008a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2S3_Init+0x54>)
 80008b8:	f003 fd7e 	bl	80043b8 <HAL_I2S_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008c2:	f000 f9a5 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000108 	.word	0x20000108
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	00017700 	.word	0x00017700

080008d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_SPI1_Init+0x64>)
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_SPI1_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_SPI1_Init+0x64>)
 80008e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI1_Init+0x64>)
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI1_Init+0x64>)
 8000924:	220a      	movs	r2, #10
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_SPI1_Init+0x64>)
 800092a:	f004 ffbd 	bl	80058a8 <HAL_SPI_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 f96c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000150 	.word	0x20000150
 8000940:	40013000 	.word	0x40013000

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART3_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800097c:	f005 f81d 	bl	80059ba <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f943 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001a8 	.word	0x200001a8
 8000994:	40004800 	.word	0x40004800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a90      	ldr	r2, [pc, #576]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	4b8a      	ldr	r3, [pc, #552]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a89      	ldr	r2, [pc, #548]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a82      	ldr	r2, [pc, #520]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <MX_GPIO_Init+0x260>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b7c      	ldr	r3, [pc, #496]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a7b      	ldr	r2, [pc, #492]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b79      	ldr	r3, [pc, #484]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a74      	ldr	r2, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a6d      	ldr	r2, [pc, #436]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	; (8000bf8 <MX_GPIO_Init+0x260>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000a5c:	4867      	ldr	r0, [pc, #412]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000a5e:	f000 ff9f 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2101      	movs	r1, #1
 8000a66:	4866      	ldr	r0, [pc, #408]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000a68:	f000 ff9a 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2130      	movs	r1, #48	; 0x30
 8000a70:	4863      	ldr	r0, [pc, #396]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000a72:	f000 ff95 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2103      	movs	r1, #3
 8000a7a:	4862      	ldr	r0, [pc, #392]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000a7c:	f000 ff90 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a80:	2200      	movs	r2, #0
 8000a82:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a86:	4860      	ldr	r0, [pc, #384]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000a88:	f000 ff8a 	bl	80019a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE9 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_9;
 8000a8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4855      	ldr	r0, [pc, #340]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000aa6:	f000 fdc7 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000aaa:	2331      	movs	r3, #49	; 0x31
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	484f      	ldr	r0, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000ac2:	f000 fdb9 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4847      	ldr	r0, [pc, #284]	; (8000c00 <MX_GPIO_Init+0x268>)
 8000ae2:	f000 fda9 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4844      	ldr	r0, [pc, #272]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000afc:	f000 fd9c 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b00:	230e      	movs	r3, #14
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	483d      	ldr	r0, [pc, #244]	; (8000c0c <MX_GPIO_Init+0x274>)
 8000b16:	f000 fd8f 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4834      	ldr	r0, [pc, #208]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000b32:	f000 fd81 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b36:	2304      	movs	r3, #4
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	482e      	ldr	r0, [pc, #184]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000b4a:	f000 fd75 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8000b4e:	f44f 43fb 	mov.w	r3, #32128	; 0x7d80
 8000b52:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4826      	ldr	r0, [pc, #152]	; (8000bfc <MX_GPIO_Init+0x264>)
 8000b64:	f000 fd68 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_GPIO_Init+0x26c>)
 8000b86:	f000 fd57 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b8a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b8e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000ba4:	f000 fd48 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ba8:	2320      	movs	r3, #32
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_GPIO_Init+0x270>)
 8000bbc:	f000 fd3c 	bl	8001638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f000 fd00 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f000 fd19 	bl	8001602 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2008      	movs	r0, #8
 8000bd6:	f000 fcf8 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000bda:	2008      	movs	r0, #8
 8000bdc:	f000 fd11 	bl	8001602 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2009      	movs	r0, #9
 8000be6:	f000 fcf0 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bea:	2009      	movs	r0, #9
 8000bec:	f000 fd09 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020400 	.word	0x40020400
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40020000 	.word	0x40020000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>

08000c1a <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ =0x2737 ,//0x2737
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ =0x272a   //0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b087      	sub	sp, #28
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000c24:	23ff      	movs	r3, #255	; 0xff
 8000c26:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	e020      	b.n	8000c70 <calculate_crc+0x56>
		crc ^= data[i];
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4413      	add	r3, r2
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	4053      	eors	r3, r2
 8000c3a:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e010      	b.n	8000c64 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	da06      	bge.n	8000c58 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000c54:	75fb      	strb	r3, [r7, #23]
 8000c56:	e002      	b.n	8000c5e <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d9eb      	bls.n	8000c42 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3da      	bcc.n	8000c2e <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af02      	add	r7, sp, #8
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	733b      	strb	r3, [r7, #12]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	b299      	uxth	r1, r3
 8000cae:	f107 020c 	add.w	r2, r7, #12
 8000cb2:	231e      	movs	r3, #30
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f002 fbfe 	bl	80034b8 <HAL_I2C_Master_Transmit>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <sht3x_send_command+0x42>
	}

	return true;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b29b      	uxth	r3, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <sht3x_read_temperature_and_humidity>:

	return true;
}

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000d08:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff ffba 	bl	8000c86 <sht3x_send_command>

	HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 fb5a 	bl	80013cc <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	b299      	uxth	r1, r3
 8000d24:	f107 0214 	add.w	r2, r7, #20
 8000d28:	231e      	movs	r3, #30
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	f002 fcc1 	bl	80036b4 <HAL_I2C_Master_Receive>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	e050      	b.n	8000dde <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff69 	bl	8000c1a <calculate_crc>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	3303      	adds	r3, #3
 8000d52:	2102      	movs	r1, #2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff60 	bl	8000c1a <calculate_crc>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	7ffa      	ldrb	r2, [r7, #31]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d103      	bne.n	8000d6e <sht3x_read_temperature_and_humidity+0x72>
 8000d66:	7e7b      	ldrb	r3, [r7, #25]
 8000d68:	7fba      	ldrb	r2, [r7, #30]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d001      	beq.n	8000d72 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e035      	b.n	8000dde <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8000d72:	7d3b      	ldrb	r3, [r7, #20]
 8000d74:	7d7a      	ldrb	r2, [r7, #21]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ffa9 	bl	8000cd0 <uint8_to_uint16>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	7e3a      	ldrb	r2, [r7, #24]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ffa1 	bl	8000cd0 <uint8_to_uint16>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000d92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000de8 <sht3x_read_temperature_and_humidity+0xec>
 8000da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000da6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000dec <sht3x_read_temperature_and_humidity+0xf0>
 8000daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000df0 <sht3x_read_temperature_and_humidity+0xf4>
 8000db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8000dbc:	8b7b      	ldrh	r3, [r7, #26]
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000df4 <sht3x_read_temperature_and_humidity+0xf8>
 8000dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dce:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000dec <sht3x_read_temperature_and_humidity+0xf0>
 8000dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	432f0000 	.word	0x432f0000
 8000dec:	477fff00 	.word	0x477fff00
 8000df0:	42340000 	.word	0x42340000
 8000df4:	42c80000 	.word	0x42c80000

08000df8 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	if (enable) {
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <sht3x_set_header_enable+0x20>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 8000e0a:	f243 016d 	movw	r1, #12397	; 0x306d
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff39 	bl	8000c86 <sht3x_send_command>
 8000e14:	4603      	mov	r3, r0
 8000e16:	e005      	b.n	8000e24 <sht3x_set_header_enable+0x2c>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 8000e18:	f243 0166 	movw	r1, #12390	; 0x3066
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff32 	bl	8000c86 <sht3x_send_command>
 8000e22:	4603      	mov	r3, r0
	}
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f000 fba2 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_I2C_MspInit+0x84>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12c      	bne.n	8000ef8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000eba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <HAL_I2C_MspInit+0x8c>)
 8000ed8:	f000 fbae 	bl	8001638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <HAL_I2S_MspInit+0xf0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d15a      	bne.n	8000ff2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f40:	23c0      	movs	r3, #192	; 0xc0
 8000f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fb6b 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f58:	f7ff fe5a 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_I2S_MspInit+0xf4>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <HAL_I2S_MspInit+0xf8>)
 8000fcc:	f000 fb34 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <HAL_I2S_MspInit+0xfc>)
 8000fee:	f000 fb23 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3738      	adds	r7, #56	; 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40003c00 	.word	0x40003c00
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020800 	.word	0x40020800

0800100c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_SPI_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_SPI_MspInit+0x88>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_SPI_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001066:	23e0      	movs	r3, #224	; 0xe0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001076:	2305      	movs	r3, #5
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_SPI_MspInit+0x8c>)
 8001082:	f000 fad9 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40013000 	.word	0x40013000
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d14b      	bne.n	8001156 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a20      	ldr	r2, [pc, #128]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_UART_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_UART_MspInit+0xc8>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_UART_MspInit+0xc8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001124:	2307      	movs	r3, #7
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <HAL_UART_MspInit+0xcc>)
 8001130:	f000 fa82 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001146:	2307      	movs	r3, #7
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <HAL_UART_MspInit+0xd0>)
 8001152:	f000 fa71 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40004800 	.word	0x40004800
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40020c00 	.word	0x40020c00

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f8e6 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 fc03 	bl	80019d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80011d6:	2004      	movs	r0, #4
 80011d8:	f000 fbfc 	bl	80019d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011e4:	2008      	movs	r0, #8
 80011e6:	f000 fbf5 	bl	80019d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <OTG_FS_IRQHandler+0x10>)
 80011f6:	f000 fe7b 	bl	8001ef0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000610 	.word	0x20000610

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f008 facc 	bl	80097d0 <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20020000 	.word	0x20020000
 8001264:	00000400 	.word	0x00000400
 8001268:	2000022c 	.word	0x2000022c
 800126c:	20000928 	.word	0x20000928

08001270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f008 fa8b 	bl	80097dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f94b 	bl	8000560 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80012d8:	08009af4 	.word	0x08009af4
  ldr r2, =_sbss
 80012dc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80012e0:	20000924 	.word	0x20000924

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f94f 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fd86 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f967 	bl	800161e <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f92f 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000008 	.word	0x20000008
 8001384:	20000010 	.word	0x20000010
 8001388:	2000000c 	.word	0x2000000c

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000010 	.word	0x20000010
 80013b0:	20000230 	.word	0x20000230

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000230 	.word	0x20000230

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000010 	.word	0x20000010

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff29 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff3e 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff31 	bl	8001478 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e16b      	b.n	800192c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 815a 	bne.w	8001926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	2b02      	cmp	r3, #2
 8001688:	d130      	bne.n	80016ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 0201 	and.w	r2, r3, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80b4 	beq.w	8001926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b60      	ldr	r3, [pc, #384]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017da:	4a5b      	ldr	r2, [pc, #364]	; (8001948 <HAL_GPIO_Init+0x310>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_GPIO_Init+0x314>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d02b      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a51      	ldr	r2, [pc, #324]	; (8001950 <HAL_GPIO_Init+0x318>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d025      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <HAL_GPIO_Init+0x320>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <HAL_GPIO_Init+0x324>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x328>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_GPIO_Init+0x330>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x20a>
 800183e:	2307      	movs	r3, #7
 8001840:	e00e      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001842:	2308      	movs	r3, #8
 8001844:	e00c      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001846:	2306      	movs	r3, #6
 8001848:	e00a      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800184a:	2305      	movs	r3, #5
 800184c:	e008      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800184e:	2304      	movs	r3, #4
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001852:	2303      	movs	r3, #3
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800185e:	2300      	movs	r3, #0
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	4093      	lsls	r3, r2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001870:	4935      	ldr	r1, [pc, #212]	; (8001948 <HAL_GPIO_Init+0x310>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_GPIO_Init+0x334>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_GPIO_Init+0x334>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_GPIO_Init+0x334>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_GPIO_Init+0x334>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_GPIO_Init+0x334>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_GPIO_Init+0x334>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_GPIO_Init+0x334>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_GPIO_Init+0x334>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b0f      	cmp	r3, #15
 8001930:	f67f ae90 	bls.w	8001654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40021400 	.word	0x40021400
 8001964:	40021800 	.word	0x40021800
 8001968:	40021c00 	.word	0x40021c00
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f806 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1c:	b08f      	sub	sp, #60	; 0x3c
 8001a1e:	af0a      	add	r7, sp, #40	; 0x28
 8001a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e054      	b.n	8001ad6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f007 fc18 	bl	800927c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fc46 	bl	80062fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	687e      	ldr	r6, [r7, #4]
 8001a78:	466d      	mov	r5, sp
 8001a7a:	f106 0410 	add.w	r4, r6, #16
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a8e:	1d33      	adds	r3, r6, #4
 8001a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a92:	6838      	ldr	r0, [r7, #0]
 8001a94:	f004 fbc0 	bl	8006218 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fc3d 	bl	800631e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	687e      	ldr	r6, [r7, #4]
 8001aac:	466d      	mov	r5, sp
 8001aae:	f106 0410 	add.w	r4, r6, #16
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac2:	1d33      	adds	r3, r6, #4
 8001ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f004 fdc6 	bl	8006658 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ade <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ade:	b590      	push	{r4, r7, lr}
 8001ae0:	b089      	sub	sp, #36	; 0x24
 8001ae2:	af04      	add	r7, sp, #16
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	4608      	mov	r0, r1
 8001ae8:	4611      	mov	r1, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4603      	mov	r3, r0
 8001aee:	70fb      	strb	r3, [r7, #3]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70bb      	strb	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_HCD_HC_Init+0x28>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e076      	b.n	8001bf4 <HAL_HCD_HC_Init+0x116>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	333d      	adds	r3, #61	; 0x3d
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	787a      	ldrb	r2, [r7, #1]
 8001b30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3340      	adds	r3, #64	; 0x40
 8001b40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b42:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3339      	adds	r3, #57	; 0x39
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	333f      	adds	r3, #63	; 0x3f
 8001b64:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	78ba      	ldrb	r2, [r7, #2]
 8001b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b72:	b2d0      	uxtb	r0, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	333a      	adds	r3, #58	; 0x3a
 8001b80:	4602      	mov	r2, r0
 8001b82:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da09      	bge.n	8001ba0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	333b      	adds	r3, #59	; 0x3b
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e008      	b.n	8001bb2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	333b      	adds	r3, #59	; 0x3b
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	333c      	adds	r3, #60	; 0x3c
 8001bc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bc4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	787c      	ldrb	r4, [r7, #1]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	78f9      	ldrb	r1, [r7, #3]
 8001bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f004 febf 	bl	8006964 <USB_HC_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}

08001bfc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_HCD_HC_Halt+0x1e>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e00f      	b.n	8001c3a <HAL_HCD_HC_Halt+0x3e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 f90f 	bl	8006e4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	70fb      	strb	r3, [r7, #3]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70bb      	strb	r3, [r7, #2]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	333b      	adds	r3, #59	; 0x3b
 8001c6c:	78ba      	ldrb	r2, [r7, #2]
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	333f      	adds	r3, #63	; 0x3f
 8001c7e:	787a      	ldrb	r2, [r7, #1]
 8001c80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c82:	7c3b      	ldrb	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d112      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2203      	movs	r2, #3
 8001c98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	333d      	adds	r3, #61	; 0x3d
 8001ca8:	7f3a      	ldrb	r2, [r7, #28]
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e008      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3342      	adds	r3, #66	; 0x42
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f200 80c6 	bhi.w	8001e54 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001e41 	.word	0x08001e41
 8001cd8:	08001d45 	.word	0x08001d45
 8001cdc:	08001dc3 	.word	0x08001dc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ce0:	7c3b      	ldrb	r3, [r7, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	f040 80b8 	bne.w	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ce8:	78bb      	ldrb	r3, [r7, #2]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 80b4 	bne.w	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cf0:	8b3b      	ldrh	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3355      	adds	r3, #85	; 0x55
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3355      	adds	r3, #85	; 0x55
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3342      	adds	r3, #66	; 0x42
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d2e:	e093      	b.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3342      	adds	r3, #66	; 0x42
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
      break;
 8001d42:	e089      	b.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d44:	78bb      	ldrb	r3, [r7, #2]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3355      	adds	r3, #85	; 0x55
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3342      	adds	r3, #66	; 0x42
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d70:	e073      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e069      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3354      	adds	r3, #84	; 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3342      	adds	r3, #66	; 0x42
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e055      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3342      	adds	r3, #66	; 0x42
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
      break;
 8001dc0:	e04b      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d11d      	bne.n	8001e04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3355      	adds	r3, #85	; 0x55
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3342      	adds	r3, #66	; 0x42
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dee:	e034      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3342      	adds	r3, #66	; 0x42
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]
      break;
 8001e02:	e02a      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3354      	adds	r3, #84	; 0x54
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3342      	adds	r3, #66	; 0x42
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e016      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3342      	adds	r3, #66	; 0x42
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	701a      	strb	r2, [r3, #0]
      break;
 8001e3e:	e00c      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3342      	adds	r3, #66	; 0x42
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	3344      	adds	r3, #68	; 0x44
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	8b3a      	ldrh	r2, [r7, #24]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	202c      	movs	r0, #44	; 0x2c
 8001e74:	fb00 f303 	mul.w	r3, r0, r3
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3360      	adds	r3, #96	; 0x60
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3350      	adds	r3, #80	; 0x50
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3339      	adds	r3, #57	; 0x39
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3361      	adds	r3, #97	; 0x61
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	222c      	movs	r2, #44	; 0x2c
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	3338      	adds	r3, #56	; 0x38
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	18d1      	adds	r1, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f004 fe62 	bl	8006ba8 <USB_HC_StartXfer>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fb63 	bl	80065d2 <USB_GetMode>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 80f6 	bne.w	8002100 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 fb47 	bl	80065ac <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ec 	beq.w	80020fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fb3e 	bl	80065ac <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f3a:	d104      	bne.n	8001f46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fb2e 	bl	80065ac <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5a:	d104      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fb1e 	bl	80065ac <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f7a:	d104      	bne.n	8001f86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fb0e 	bl	80065ac <USB_ReadInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d103      	bne.n	8001fa2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fb00 	bl	80065ac <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb6:	d11c      	bne.n	8001ff2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	6938      	ldr	r0, [r7, #16]
 8001fd6:	f004 f9ef 	bl	80063b8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001fda:	6938      	ldr	r0, [r7, #16]
 8001fdc:	f004 fa20 	bl	8006420 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fbf6 	bl	80067d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f007 f9c3 	bl	8009378 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fad8 	bl	80065ac <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002002:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002006:	d102      	bne.n	800200e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 f89e 	bl	800314a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 faca 	bl	80065ac <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b08      	cmp	r3, #8
 8002020:	d106      	bne.n	8002030 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f007 f98c 	bl	8009340 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f004 fab9 	bl	80065ac <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b10      	cmp	r3, #16
 8002042:	d101      	bne.n	8002048 <HAL_HCD_IRQHandler+0x158>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_HCD_IRQHandler+0x15a>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 ffa1 	bl	8002fa6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0210 	orr.w	r2, r2, #16
 8002072:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fa97 	bl	80065ac <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002088:	d13a      	bne.n	8002100 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fecc 	bl	8006e2c <USB_HC_ReadInterrupt>
 8002094:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e025      	b.n	80020e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d018      	beq.n	80020e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c6:	d106      	bne.n	80020d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8ab 	bl	800222a <HCD_HC_IN_IRQHandler>
 80020d4:	e005      	b.n	80020e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fbf9 	bl	80028d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3d4      	bcc.n	800209c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	e000      	b.n	8002100 <HAL_HCD_IRQHandler+0x210>
      return;
 80020fe:	bf00      	nop
    }
  }
}
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_HCD_Start+0x16>
 8002118:	2302      	movs	r3, #2
 800211a:	e013      	b.n	8002144 <HAL_HCD_Start+0x3e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f004 fbb8 	bl	80068a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 f8d0 	bl	80062da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_HCD_Stop+0x16>
 800215e:	2302      	movs	r3, #2
 8002160:	e00d      	b.n	800217e <HAL_HCD_Stop+0x32>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 ffa6 	bl	80070c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fb5a 	bl	800684c <USB_ResetPort>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3350      	adds	r3, #80	; 0x50
 80021e4:	681b      	ldr	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fb9e 	bl	8006940 <USB_GetCurrentFrame>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fb79 	bl	8006912 <USB_GetHostSpeed>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b04      	cmp	r3, #4
 8002258:	d11a      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	461a      	mov	r2, r3
 8002268:	2304      	movs	r3, #4
 800226a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3361      	adds	r3, #97	; 0x61
 800227a:	2206      	movs	r2, #6
 800227c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fde0 	bl	8006e4e <USB_HC_Halt>
 800228e:	e0af      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a6:	d11b      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3361      	adds	r3, #97	; 0x61
 80022ca:	2207      	movs	r2, #7
 80022cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fdb8 	bl	8006e4e <USB_HC_Halt>
 80022de:	e087      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d109      	bne.n	800230a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2320      	movs	r3, #32
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e072      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b08      	cmp	r3, #8
 800231e:	d11a      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	2308      	movs	r3, #8
 8002330:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3361      	adds	r3, #97	; 0x61
 8002340:	2205      	movs	r2, #5
 8002342:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f004 fd7d 	bl	8006e4e <USB_HC_Halt>
 8002354:	e04c      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d11b      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002380:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3361      	adds	r3, #97	; 0x61
 8002390:	2208      	movs	r2, #8
 8002392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fd55 	bl	8006e4e <USB_HC_Halt>
 80023a4:	e024      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d119      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3361      	adds	r3, #97	; 0x61
 80023dc:	2206      	movs	r2, #6
 80023de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 fd2f 	bl	8006e4e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002406:	d112      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f004 fd1b 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800242c:	e24e      	b.n	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 80df 	bne.w	8002604 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d019      	beq.n	8002482 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3348      	adds	r3, #72	; 0x48
 800245c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	0159      	lsls	r1, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	440b      	add	r3, r1
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	202c      	movs	r0, #44	; 0x2c
 8002478:	fb00 f303 	mul.w	r3, r0, r3
 800247c:	440b      	add	r3, r1
 800247e:	3350      	adds	r3, #80	; 0x50
 8002480:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3361      	adds	r3, #97	; 0x61
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2301      	movs	r3, #1
 80024b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	333f      	adds	r3, #63	; 0x3f
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	333f      	adds	r3, #63	; 0x3f
 80024da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d111      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 fcaf 	bl	8006e4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	2310      	movs	r3, #16
 8002500:	6093      	str	r3, [r2, #8]
 8002502:	e03a      	b.n	800257a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	333f      	adds	r3, #63	; 0x3f
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d009      	beq.n	800252c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	333f      	adds	r3, #63	; 0x3f
 8002526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002528:	2b01      	cmp	r3, #1
 800252a:	d126      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	0151      	lsls	r1, r2, #5
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	440a      	add	r2, r1
 8002542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800254a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	b2d9      	uxtb	r1, r3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	202c      	movs	r0, #44	; 0x2c
 8002568:	fb00 f303 	mul.w	r3, r0, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	; 0x60
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f006 ff0d 	bl	8009394 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d12b      	bne.n	80025da <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3348      	adds	r3, #72	; 0x48
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	202c      	movs	r0, #44	; 0x2c
 8002598:	fb00 f202 	mul.w	r2, r0, r2
 800259c:	440a      	add	r2, r1
 800259e:	3240      	adds	r2, #64	; 0x40
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 818e 	beq.w	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3354      	adds	r3, #84	; 0x54
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3354      	adds	r3, #84	; 0x54
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
}
 80025d8:	e178      	b.n	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3354      	adds	r3, #84	; 0x54
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2d8      	uxtb	r0, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	4602      	mov	r2, r0
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	e163      	b.n	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	f040 80f6 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d109      	bne.n	8002644 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3360      	adds	r3, #96	; 0x60
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e0c9      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3361      	adds	r3, #97	; 0x61
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d109      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3360      	adds	r3, #96	; 0x60
 8002666:	2205      	movs	r2, #5
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e0b5      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3361      	adds	r3, #97	; 0x61
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b06      	cmp	r3, #6
 800267e:	d009      	beq.n	8002694 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3361      	adds	r3, #97	; 0x61
 800268e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002690:	2b08      	cmp	r3, #8
 8002692:	d150      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	335c      	adds	r3, #92	; 0x5c
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	202c      	movs	r0, #44	; 0x2c
 80026ac:	fb00 f303 	mul.w	r3, r0, r3
 80026b0:	440b      	add	r3, r1
 80026b2:	335c      	adds	r3, #92	; 0x5c
 80026b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d912      	bls.n	80026f0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3360      	adds	r3, #96	; 0x60
 80026ea:	2204      	movs	r2, #4
 80026ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026ee:	e073      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3360      	adds	r3, #96	; 0x60
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002718:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002720:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002734:	e050      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d122      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3360      	adds	r3, #96	; 0x60
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002772:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e023      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3361      	adds	r3, #97	; 0x61
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	d119      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	335c      	adds	r3, #92	; 0x5c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	202c      	movs	r0, #44	; 0x2c
 80027bc:	fb00 f303 	mul.w	r3, r0, r3
 80027c0:	440b      	add	r3, r1
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3360      	adds	r3, #96	; 0x60
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2302      	movs	r3, #2
 80027e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	b2d9      	uxtb	r1, r3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	202c      	movs	r0, #44	; 0x2c
 80027f4:	fb00 f303 	mul.w	r3, r0, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f006 fdc7 	bl	8009394 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002806:	e061      	b.n	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b10      	cmp	r3, #16
 800281c:	d156      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d111      	bne.n	8002856 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f004 fafd 	bl	8006e4e <USB_HC_Halt>
 8002854:	e031      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	333f      	adds	r3, #63	; 0x3f
 8002878:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800287a:	2b02      	cmp	r3, #2
 800287c:	d11d      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	335c      	adds	r3, #92	; 0x5c
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d110      	bne.n	80028ba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	2203      	movs	r2, #3
 80028a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 faca 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	2310      	movs	r3, #16
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11a      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2304      	movs	r3, #4
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3361      	adds	r3, #97	; 0x61
 8002924:	2206      	movs	r2, #6
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fa8b 	bl	8006e4e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002938:	e331      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d12e      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2320      	movs	r3, #32
 8002960:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	333d      	adds	r3, #61	; 0x3d
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 8313 	bne.w	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333d      	adds	r3, #61	; 0x3d
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	3360      	adds	r3, #96	; 0x60
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fa51 	bl	8006e4e <USB_HC_Halt>
}
 80029ac:	e2f7      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c4:	d112      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 fa32 	bl	8006e4e <USB_HC_Halt>
}
 80029ea:	e2d8      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d140      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d111      	bne.n	8002a4e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	333d      	adds	r3, #61	; 0x3d
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2340      	movs	r3, #64	; 0x40
 8002a4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 f9e6 	bl	8006e4e <USB_HC_Halt>
}
 8002a82:	e28c      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d12c      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3361      	adds	r3, #97	; 0x61
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	333d      	adds	r3, #61	; 0x3d
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f9b7 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	6093      	str	r3, [r2, #8]
}
 8002af2:	e254      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d11a      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	2308      	movs	r3, #8
 8002b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 f988 	bl	8006e4e <USB_HC_Halt>
}
 8002b3e:	e22e      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d140      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	335c      	adds	r3, #92	; 0x5c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	2203      	movs	r2, #3
 8002b78:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	333d      	adds	r3, #61	; 0x3d
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d112      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	333c      	adds	r3, #60	; 0x3c
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333d      	adds	r3, #61	; 0x3d
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 f945 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	6093      	str	r3, [r2, #8]
}
 8002bd6:	e1e2      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d164      	bne.n	8002cb8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d111      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3361      	adds	r3, #97	; 0x61
 8002c04:	2206      	movs	r2, #6
 8002c06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f91b 	bl	8006e4e <USB_HC_Halt>
 8002c18:	e044      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	202c      	movs	r0, #44	; 0x2c
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	440b      	add	r3, r1
 8002c38:	335c      	adds	r3, #92	; 0x5c
 8002c3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	335c      	adds	r3, #92	; 0x5c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d920      	bls.n	8002c92 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	335c      	adds	r3, #92	; 0x5c
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	2204      	movs	r2, #4
 8002c72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	b2d9      	uxtb	r1, r3
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	202c      	movs	r0, #44	; 0x2c
 8002c7e:	fb00 f303 	mul.w	r3, r0, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3360      	adds	r3, #96	; 0x60
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f006 fb82 	bl	8009394 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c90:	e008      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	6093      	str	r3, [r2, #8]
}
 8002cb6:	e172      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d11b      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3361      	adds	r3, #97	; 0x61
 8002cde:	2208      	movs	r2, #8
 8002ce0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f8ae 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d04:	6093      	str	r3, [r2, #8]
}
 8002d06:	e14a      	b.n	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 813f 	bne.w	8002f9e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3361      	adds	r3, #97	; 0x61
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d17d      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	333f      	adds	r3, #63	; 0x3f
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d00a      	beq.n	8002d70 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	333f      	adds	r3, #63	; 0x3f
 8002d68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	f040 8100 	bne.w	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d113      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3355      	adds	r3, #85	; 0x55
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2d8      	uxtb	r0, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3355      	adds	r3, #85	; 0x55
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 80e3 	bne.w	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80d8 	beq.w	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	334c      	adds	r3, #76	; 0x4c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	fb00 f202 	mul.w	r2, r0, r2
 8002dda:	440a      	add	r2, r1
 8002ddc:	3240      	adds	r2, #64	; 0x40
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	202c      	movs	r0, #44	; 0x2c
 8002dea:	fb00 f202 	mul.w	r2, r0, r2
 8002dee:	440a      	add	r2, r1
 8002df0:	3240      	adds	r2, #64	; 0x40
 8002df2:	8812      	ldrh	r2, [r2, #0]
 8002df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80b5 	beq.w	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3355      	adds	r3, #85	; 0x55
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f083 0301 	eor.w	r3, r3, #1
 8002e1a:	b2d8      	uxtb	r0, r3
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3355      	adds	r3, #85	; 0x55
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e09f      	b.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d109      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e08b      	b.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3361      	adds	r3, #97	; 0x61
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d109      	bne.n	8002e80 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3360      	adds	r3, #96	; 0x60
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e077      	b.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3361      	adds	r3, #97	; 0x61
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d109      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3360      	adds	r3, #96	; 0x60
 8002ea2:	2205      	movs	r2, #5
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e063      	b.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	; 0x61
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d009      	beq.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3361      	adds	r3, #97	; 0x61
 8002eca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d14f      	bne.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	335c      	adds	r3, #92	; 0x5c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	202c      	movs	r0, #44	; 0x2c
 8002ee8:	fb00 f303 	mul.w	r3, r0, r3
 8002eec:	440b      	add	r3, r1
 8002eee:	335c      	adds	r3, #92	; 0x5c
 8002ef0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	335c      	adds	r3, #92	; 0x5c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d912      	bls.n	8002f2c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3360      	adds	r3, #96	; 0x60
 8002f26:	2204      	movs	r2, #4
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e021      	b.n	8002f70 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3360      	adds	r3, #96	; 0x60
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2302      	movs	r3, #2
 8002f80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	b2d9      	uxtb	r1, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	fb00 f303 	mul.w	r3, r0, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3360      	adds	r3, #96	; 0x60
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f006 f9fb 	bl	8009394 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	0c5b      	lsrs	r3, r3, #17
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d004      	beq.n	8002fec <HCD_RXQLVL_IRQHandler+0x46>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	f000 80a9 	beq.w	800313c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fea:	e0aa      	b.n	8003142 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a6 	beq.w	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3344      	adds	r3, #68	; 0x44
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 809b 	beq.w	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3350      	adds	r3, #80	; 0x50
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	441a      	add	r2, r3
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	202c      	movs	r0, #44	; 0x2c
 8003024:	fb00 f303 	mul.w	r3, r0, r3
 8003028:	440b      	add	r3, r1
 800302a:	334c      	adds	r3, #76	; 0x4c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d87a      	bhi.n	8003128 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3344      	adds	r3, #68	; 0x44
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	b292      	uxth	r2, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f003 fa56 	bl	80064fc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3344      	adds	r3, #68	; 0x44
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	441a      	add	r2, r3
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	202c      	movs	r0, #44	; 0x2c
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	440b      	add	r3, r1
 8003070:	3344      	adds	r3, #68	; 0x44
 8003072:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3350      	adds	r3, #80	; 0x50
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	441a      	add	r2, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	440b      	add	r3, r1
 8003094:	3350      	adds	r3, #80	; 0x50
 8003096:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	0cdb      	lsrs	r3, r3, #19
 80030a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3340      	adds	r3, #64	; 0x40
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d13c      	bne.n	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d039      	beq.n	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3354      	adds	r3, #84	; 0x54
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	f083 0301 	eor.w	r3, r3, #1
 8003112:	b2d8      	uxtb	r0, r3
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3354      	adds	r3, #84	; 0x54
 8003122:	4602      	mov	r2, r0
 8003124:	701a      	strb	r2, [r3, #0]
      break;
 8003126:	e00b      	b.n	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	2204      	movs	r2, #4
 8003138:	701a      	strb	r2, [r3, #0]
      break;
 800313a:	e001      	b.n	8003140 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003140:	bf00      	nop
  }
}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003176:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d10b      	bne.n	800319a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d102      	bne.n	8003192 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f006 f8e5 	bl	800935c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d132      	bne.n	800320a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f043 0308 	orr.w	r3, r3, #8
 80031aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d126      	bne.n	8003204 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d113      	bne.n	80031e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031c8:	d106      	bne.n	80031d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 fb01 	bl	80067d8 <USB_InitFSLSPClkSel>
 80031d6:	e011      	b.n	80031fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fafa 	bl	80067d8 <USB_InitFSLSPClkSel>
 80031e4:	e00a      	b.n	80031fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d106      	bne.n	80031fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f4:	461a      	mov	r2, r3
 80031f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f006 f8d7 	bl	80093b0 <HAL_HCD_PortEnabled_Callback>
 8003202:	e002      	b.n	800320a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f006 f8e1 	bl	80093cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b20      	cmp	r3, #32
 8003212:	d103      	bne.n	800321c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f043 0320 	orr.w	r3, r3, #32
 800321a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6013      	str	r3, [r2, #0]
}
 8003228:	bf00      	nop
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fe10 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f002 f9a0 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	; (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7fd ff72 	bl	80013b4 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80e0 	bne.w	80036a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4970      	ldr	r1, [pc, #448]	; (80036ac <HAL_I2C_Master_Transmit+0x1f4>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fd86 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0d3      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e0cc      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbf0 	bl	8003d5c <I2C_MasterRequestWrite>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08d      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800359c:	e066      	b.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fe00 	bl	80041a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11b      	bne.n	8003640 <HAL_I2C_Master_Transmit+0x188>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fdf0 	bl	800422a <I2C_WaitOnBTFFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01a      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d194      	bne.n	800359e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	00100002 	.word	0x00100002
 80036b0:	ffff0000 	.word	0xffff0000

080036b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	817b      	strh	r3, [r7, #10]
 80036c4:	4613      	mov	r3, r2
 80036c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7fd fe74 	bl	80013b4 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	f040 820b 	bne.w	8003af2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2319      	movs	r3, #25
 80036e2:	2201      	movs	r2, #1
 80036e4:	497c      	ldr	r1, [pc, #496]	; (80038d8 <HAL_I2C_Master_Receive+0x224>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fc88 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	e1fe      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_I2C_Master_Receive+0x50>
 8003700:	2302      	movs	r3, #2
 8003702:	e1f7      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d007      	beq.n	800372a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2222      	movs	r2, #34	; 0x22
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2210      	movs	r2, #16
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	893a      	ldrh	r2, [r7, #8]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_I2C_Master_Receive+0x228>)
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800376c:	8979      	ldrh	r1, [r7, #10]
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fb74 	bl	8003e60 <I2C_MasterRequestRead>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1b8      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d113      	bne.n	80037b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	623b      	str	r3, [r7, #32]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e18c      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d11b      	bne.n	80037f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e16c      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d11b      	bne.n	8003832 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	e14c      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003858:	e138      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	2b03      	cmp	r3, #3
 8003860:	f200 80f1 	bhi.w	8003a46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	2b01      	cmp	r3, #1
 800386a:	d123      	bne.n	80038b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fd1b 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e139      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b2:	e10b      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d14e      	bne.n	800395a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	2200      	movs	r2, #0
 80038c4:	4906      	ldr	r1, [pc, #24]	; (80038e0 <HAL_I2C_Master_Receive+0x22c>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb98 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e10e      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
 80038d6:	bf00      	nop
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000
 80038e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003958:	e0b8      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	2200      	movs	r2, #0
 8003962:	4966      	ldr	r1, [pc, #408]	; (8003afc <HAL_I2C_Master_Receive+0x448>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fb49 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0bf      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	494f      	ldr	r1, [pc, #316]	; (8003afc <HAL_I2C_Master_Receive+0x448>)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fb1b 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e091      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a44:	e042      	b.n	8003acc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fc2e 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e04c      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d118      	bne.n	8003acc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f47f aec2 	bne.w	800385a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	00010004 	.word	0x00010004

08003b00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7fd fc50 	bl	80013b4 <HAL_GetTick>
 8003b14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	f040 8111 	bne.w	8003d4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2319      	movs	r3, #25
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4988      	ldr	r1, [pc, #544]	; (8003d54 <HAL_I2C_IsDeviceReady+0x254>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa62 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e104      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2C_IsDeviceReady+0x50>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0fd      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d007      	beq.n	8003b76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2224      	movs	r2, #36	; 0x24
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_I2C_IsDeviceReady+0x258>)
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa20 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd0:	d103      	bne.n	8003bda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b6      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bde:	897b      	ldrh	r3, [r7, #10]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bee:	f7fd fbe1 	bl	80013b4 <HAL_GetTick>
 8003bf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c22:	e025      	b.n	8003c70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fd fbc6 	bl	80013b4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <HAL_I2C_IsDeviceReady+0x13a>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	22a0      	movs	r2, #160	; 0xa0
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2ba0      	cmp	r3, #160	; 0xa0
 8003c7a:	d005      	beq.n	8003c88 <HAL_I2C_IsDeviceReady+0x188>
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_I2C_IsDeviceReady+0x188>
 8003c82:	7dbb      	ldrb	r3, [r7, #22]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0cd      	beq.n	8003c24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d129      	bne.n	8003cf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2319      	movs	r3, #25
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4921      	ldr	r1, [pc, #132]	; (8003d54 <HAL_I2C_IsDeviceReady+0x254>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f994 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e036      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e02c      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2319      	movs	r3, #25
 8003d12:	2201      	movs	r2, #1
 8003d14:	490f      	ldr	r1, [pc, #60]	; (8003d54 <HAL_I2C_IsDeviceReady+0x254>)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f970 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e012      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f4ff af32 	bcc.w	8003b9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	00100002 	.word	0x00100002
 8003d58:	ffff0000 	.word	0xffff0000

08003d5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d006      	beq.n	8003d86 <I2C_MasterRequestWrite+0x2a>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d003      	beq.n	8003d86 <I2C_MasterRequestWrite+0x2a>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d84:	d108      	bne.n	8003d98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e00b      	b.n	8003db0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	2b12      	cmp	r3, #18
 8003d9e:	d107      	bne.n	8003db0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f91d 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd6:	d103      	bne.n	8003de0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e035      	b.n	8003e50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dec:	d108      	bne.n	8003e00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dfc:	611a      	str	r2, [r3, #16]
 8003dfe:	e01b      	b.n	8003e38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e00:	897b      	ldrh	r3, [r7, #10]
 8003e02:	11db      	asrs	r3, r3, #7
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 0306 	and.w	r3, r3, #6
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f063 030f 	orn	r3, r3, #15
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <I2C_MasterRequestWrite+0xfc>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f943 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e010      	b.n	8003e50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4907      	ldr	r1, [pc, #28]	; (8003e5c <I2C_MasterRequestWrite+0x100>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f933 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	00010008 	.word	0x00010008
 8003e5c:	00010002 	.word	0x00010002

08003e60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d006      	beq.n	8003e9a <I2C_MasterRequestRead+0x3a>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d003      	beq.n	8003e9a <I2C_MasterRequestRead+0x3a>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e98:	d108      	bne.n	8003eac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e00b      	b.n	8003ec4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b11      	cmp	r3, #17
 8003eb2:	d107      	bne.n	8003ec4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f893 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d103      	bne.n	8003ef4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e079      	b.n	8003fec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f00:	d108      	bne.n	8003f14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f02:	897b      	ldrh	r3, [r7, #10]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]
 8003f12:	e05f      	b.n	8003fd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f14:	897b      	ldrh	r3, [r7, #10]
 8003f16:	11db      	asrs	r3, r3, #7
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f063 030f 	orn	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4930      	ldr	r1, [pc, #192]	; (8003ff4 <I2C_MasterRequestRead+0x194>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f8b9 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e054      	b.n	8003fec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4929      	ldr	r1, [pc, #164]	; (8003ff8 <I2C_MasterRequestRead+0x198>)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8a9 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e044      	b.n	8003fec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f831 	bl	8003ffc <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	d103      	bne.n	8003fb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e017      	b.n	8003fec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	11db      	asrs	r3, r3, #7
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0306 	and.w	r3, r3, #6
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f063 030e 	orn	r3, r3, #14
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <I2C_MasterRequestRead+0x198>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f865 	bl	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010008 	.word	0x00010008
 8003ff8:	00010002 	.word	0x00010002

08003ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400c:	e025      	b.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d021      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fd f9cd 	bl	80013b4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e023      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10d      	bne.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	e00c      	b.n	800409a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0b6      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b8:	e051      	b.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d123      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e046      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fd f94b 	bl	80013b4 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e020      	b.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10c      	bne.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e00b      	b.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	43da      	mvns	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d18d      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b4:	e02d      	b.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8ce 	bl	8004358 <I2C_IsAcknowledgeFailed>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e02d      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d021      	beq.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fd f8f1 	bl	80013b4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d116      	bne.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e007      	b.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d1ca      	bne.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004236:	e02d      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f88d 	bl	8004358 <I2C_IsAcknowledgeFailed>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e02d      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d021      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004250:	f7fd f8b0 	bl	80013b4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d302      	bcc.n	8004266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d116      	bne.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e007      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d1ca      	bne.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b8:	e042      	b.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d119      	bne.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e029      	b.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fc:	f7fd f85a 	bl	80013b4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e007      	b.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d1b5      	bne.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d11b      	bne.n	80043a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f043 0204 	orr.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e128      	b.n	800461c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a90      	ldr	r2, [pc, #576]	; (8004624 <HAL_I2S_Init+0x26c>)
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fc fd91 	bl	8000f0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004400:	f023 030f 	bic.w	r3, r3, #15
 8004404:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2202      	movs	r2, #2
 800440c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d060      	beq.n	80044d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800441e:	2310      	movs	r3, #16
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e001      	b.n	8004428 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004424:	2320      	movs	r3, #32
 8004426:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b20      	cmp	r3, #32
 800442e:	d802      	bhi.n	8004436 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004436:	2001      	movs	r0, #1
 8004438:	f001 f9d8 	bl	80057ec <HAL_RCCEx_GetPeriphCLKFreq>
 800443c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004446:	d125      	bne.n	8004494 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	fbb2 f2f3 	udiv	r2, r2, r3
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	3305      	adds	r3, #5
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e01f      	b.n	80044b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fbb2 f2f3 	udiv	r2, r2, r3
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	3305      	adds	r3, #5
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e00e      	b.n	80044b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fbb2 f2f3 	udiv	r2, r2, r3
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	3305      	adds	r3, #5
 80044b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4a5c      	ldr	r2, [pc, #368]	; (8004628 <HAL_I2S_Init+0x270>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e003      	b.n	80044e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044d8:	2302      	movs	r3, #2
 80044da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d902      	bls.n	80044ec <HAL_I2S_Init+0x134>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2bff      	cmp	r3, #255	; 0xff
 80044ea:	d907      	bls.n	80044fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f043 0210 	orr.w	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e08f      	b.n	800461c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	ea42 0103 	orr.w	r1, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	430a      	orrs	r2, r1
 800450e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800451a:	f023 030f 	bic.w	r3, r3, #15
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6851      	ldr	r1, [r2, #4]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6892      	ldr	r2, [r2, #8]
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68d2      	ldr	r2, [r2, #12]
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6992      	ldr	r2, [r2, #24]
 8004532:	430a      	orrs	r2, r1
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d161      	bne.n	800460c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_I2S_Init+0x274>)
 800454c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a37      	ldr	r2, [pc, #220]	; (8004630 <HAL_I2S_Init+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_I2S_Init+0x1a4>
 8004558:	4b36      	ldr	r3, [pc, #216]	; (8004634 <HAL_I2S_Init+0x27c>)
 800455a:	e001      	b.n	8004560 <HAL_I2S_Init+0x1a8>
 800455c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	4932      	ldr	r1, [pc, #200]	; (8004630 <HAL_I2S_Init+0x278>)
 8004568:	428a      	cmp	r2, r1
 800456a:	d101      	bne.n	8004570 <HAL_I2S_Init+0x1b8>
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <HAL_I2S_Init+0x27c>)
 800456e:	e001      	b.n	8004574 <HAL_I2S_Init+0x1bc>
 8004570:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004574:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2b      	ldr	r2, [pc, #172]	; (8004630 <HAL_I2S_Init+0x278>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_I2S_Init+0x1d4>
 8004588:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_I2S_Init+0x27c>)
 800458a:	e001      	b.n	8004590 <HAL_I2S_Init+0x1d8>
 800458c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004590:	2202      	movs	r2, #2
 8004592:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_I2S_Init+0x278>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_I2S_Init+0x1ea>
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <HAL_I2S_Init+0x27c>)
 80045a0:	e001      	b.n	80045a6 <HAL_I2S_Init+0x1ee>
 80045a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b2:	d003      	beq.n	80045bc <HAL_I2S_Init+0x204>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e001      	b.n	80045c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045dc:	4313      	orrs	r3, r2
 80045de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045e6:	4313      	orrs	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_I2S_Init+0x278>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_I2S_Init+0x24c>
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_I2S_Init+0x27c>)
 8004602:	e001      	b.n	8004608 <HAL_I2S_Init+0x250>
 8004604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004608:	897a      	ldrh	r2, [r7, #10]
 800460a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	0800472f 	.word	0x0800472f
 8004628:	cccccccd 	.word	0xcccccccd
 800462c:	08004845 	.word	0x08004845
 8004630:	40003800 	.word	0x40003800
 8004634:	40003400 	.word	0x40003400

08004638 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10e      	bne.n	80046c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ffb8 	bl	8004638 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	b292      	uxth	r2, r2
 80046e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10e      	bne.n	8004726 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004716:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff93 	bl	800464c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b04      	cmp	r3, #4
 8004748:	d13a      	bne.n	80047c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	d109      	bne.n	8004768 <I2S_IRQHandler+0x3a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d102      	bne.n	8004768 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ffb4 	bl	80046d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d126      	bne.n	80047c0 <I2S_IRQHandler+0x92>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d11f      	bne.n	80047c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800478e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f043 0202 	orr.w	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff ff50 	bl	8004660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d136      	bne.n	800483a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d109      	bne.n	80047ea <I2S_IRQHandler+0xbc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d102      	bne.n	80047ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff45 	bl	8004674 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d122      	bne.n	800483a <I2S_IRQHandler+0x10c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d11b      	bne.n	800483a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004810:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ff13 	bl	8004660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a92      	ldr	r2, [pc, #584]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800485e:	4b92      	ldr	r3, [pc, #584]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004860:	e001      	b.n	8004866 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8b      	ldr	r2, [pc, #556]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800487c:	4b8a      	ldr	r3, [pc, #552]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800487e:	e001      	b.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d004      	beq.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8099 	bne.w	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d107      	bne.n	80048b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f925 	bl	8004b00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9c8 	bl	8004c60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d13a      	bne.n	8004950 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d035      	beq.n	8004950 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048ee:	4b6e      	ldr	r3, [pc, #440]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f0:	e001      	b.n	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80048f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4969      	ldr	r1, [pc, #420]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fe:	428b      	cmp	r3, r1
 8004900:	d101      	bne.n	8004906 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004902:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004904:	e001      	b.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800491e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f043 0202 	orr.w	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fe88 	bl	8004660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b08      	cmp	r3, #8
 8004958:	f040 80c3 	bne.w	8004ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80bd 	beq.w	8004ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004976:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a49      	ldr	r2, [pc, #292]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004982:	4b49      	ldr	r3, [pc, #292]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004984:	e001      	b.n	800498a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4944      	ldr	r1, [pc, #272]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004992:	428b      	cmp	r3, r1
 8004994:	d101      	bne.n	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004998:	e001      	b.n	800499e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800499a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fe4a 	bl	8004660 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049cc:	e089      	b.n	8004ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d107      	bne.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8be 	bl	8004b64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8fd 	bl	8004bfc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d12f      	bne.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02a      	beq.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a32:	e001      	b.n	8004a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4919      	ldr	r1, [pc, #100]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a40:	428b      	cmp	r3, r1
 8004a42:	d101      	bne.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a46:	e001      	b.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	f043 0202 	orr.w	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fdfa 	bl	8004660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d136      	bne.n	8004ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d031      	beq.n	8004ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a8c:	e001      	b.n	8004a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4902      	ldr	r1, [pc, #8]	; (8004aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9a:	428b      	cmp	r3, r1
 8004a9c:	d106      	bne.n	8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a9e:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa0:	e006      	b.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004aa2:	bf00      	nop
 8004aa4:	40003800 	.word	0x40003800
 8004aa8:	40003400 	.word	0x40003400
 8004aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ab4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ac4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f043 0204 	orr.w	r2, r3, #4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fdc0 	bl	8004660 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ae0:	e000      	b.n	8004ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ae2:	bf00      	nop
}
 8004ae4:	bf00      	nop
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c99      	adds	r1, r3, #2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6251      	str	r1, [r2, #36]	; 0x24
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ffc9 	bl	8004aec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	1c99      	adds	r1, r3, #2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6251      	str	r1, [r2, #36]	; 0x24
 8004b76:	8819      	ldrh	r1, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <I2SEx_TxISR_I2SExt+0x90>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <I2SEx_TxISR_I2SExt+0x22>
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <I2SEx_TxISR_I2SExt+0x94>)
 8004b84:	e001      	b.n	8004b8a <I2SEx_TxISR_I2SExt+0x26>
 8004b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d121      	bne.n	8004bea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <I2SEx_TxISR_I2SExt+0x90>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <I2SEx_TxISR_I2SExt+0x50>
 8004bb0:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <I2SEx_TxISR_I2SExt+0x94>)
 8004bb2:	e001      	b.n	8004bb8 <I2SEx_TxISR_I2SExt+0x54>
 8004bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	490d      	ldr	r1, [pc, #52]	; (8004bf4 <I2SEx_TxISR_I2SExt+0x90>)
 8004bc0:	428b      	cmp	r3, r1
 8004bc2:	d101      	bne.n	8004bc8 <I2SEx_TxISR_I2SExt+0x64>
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <I2SEx_TxISR_I2SExt+0x94>)
 8004bc6:	e001      	b.n	8004bcc <I2SEx_TxISR_I2SExt+0x68>
 8004bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff81 	bl	8004aec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40003800 	.word	0x40003800
 8004bf8:	40003400 	.word	0x40003400

08004bfc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68d8      	ldr	r0, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	1c99      	adds	r1, r3, #2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c14:	b282      	uxth	r2, r0
 8004c16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff4a 	bl	8004aec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <I2SEx_RxISR_I2SExt+0x90>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <I2SEx_RxISR_I2SExt+0x16>
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <I2SEx_RxISR_I2SExt+0x94>)
 8004c74:	e001      	b.n	8004c7a <I2SEx_RxISR_I2SExt+0x1a>
 8004c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c7a:	68d8      	ldr	r0, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	1c99      	adds	r1, r3, #2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c86:	b282      	uxth	r2, r0
 8004c88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d121      	bne.n	8004ce6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <I2SEx_RxISR_I2SExt+0x90>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <I2SEx_RxISR_I2SExt+0x50>
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <I2SEx_RxISR_I2SExt+0x94>)
 8004cae:	e001      	b.n	8004cb4 <I2SEx_RxISR_I2SExt+0x54>
 8004cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	490d      	ldr	r1, [pc, #52]	; (8004cf0 <I2SEx_RxISR_I2SExt+0x90>)
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d101      	bne.n	8004cc4 <I2SEx_RxISR_I2SExt+0x64>
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <I2SEx_RxISR_I2SExt+0x94>)
 8004cc2:	e001      	b.n	8004cc8 <I2SEx_RxISR_I2SExt+0x68>
 8004cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ccc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff ff03 	bl	8004aec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40003800 	.word	0x40003800
 8004cf4:	40003400 	.word	0x40003400

08004cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e267      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d075      	beq.n	8004e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d16:	4b88      	ldr	r3, [pc, #544]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d00c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d22:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d112      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2e:	4b82      	ldr	r3, [pc, #520]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d10b      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05b      	beq.n	8004e00 <HAL_RCC_OscConfig+0x108>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d157      	bne.n	8004e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e242      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCC_OscConfig+0x74>
 8004d5e:	4b76      	ldr	r3, [pc, #472]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a75      	ldr	r2, [pc, #468]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e01d      	b.n	8004da8 <HAL_RCC_OscConfig+0xb0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x98>
 8004d76:	4b70      	ldr	r3, [pc, #448]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a6f      	ldr	r2, [pc, #444]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b6d      	ldr	r3, [pc, #436]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6c      	ldr	r2, [pc, #432]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00b      	b.n	8004da8 <HAL_RCC_OscConfig+0xb0>
 8004d90:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a68      	ldr	r2, [pc, #416]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a65      	ldr	r2, [pc, #404]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fc fb00 	bl	80013b4 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fc fafc 	bl	80013b4 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e207      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0xc0>
 8004dd6:	e014      	b.n	8004e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fc faec 	bl	80013b4 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fc fae8 	bl	80013b4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e1f3      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	4b51      	ldr	r3, [pc, #324]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0xe8>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d063      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e0e:	4b4a      	ldr	r3, [pc, #296]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d11c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e26:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d116      	bne.n	8004e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e32:	4b41      	ldr	r3, [pc, #260]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_RCC_OscConfig+0x152>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e1c7      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4937      	ldr	r1, [pc, #220]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5e:	e03a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e68:	4b34      	ldr	r3, [pc, #208]	; (8004f3c <HAL_RCC_OscConfig+0x244>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fc faa1 	bl	80013b4 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e76:	f7fc fa9d 	bl	80013b4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e1a8      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e94:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4925      	ldr	r1, [pc, #148]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_OscConfig+0x244>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fc fa80 	bl	80013b4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb8:	f7fc fa7c 	bl	80013b4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e187      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d036      	beq.n	8004f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <HAL_RCC_OscConfig+0x248>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fc fa60 	bl	80013b4 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fc fa5c 	bl	80013b4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e167      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x200>
 8004f16:	e01b      	b.n	8004f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_OscConfig+0x248>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fc fa49 	bl	80013b4 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f24:	e00e      	b.n	8004f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f26:	f7fc fa45 	bl	80013b4 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d907      	bls.n	8004f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e150      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	42470000 	.word	0x42470000
 8004f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f44:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ea      	bne.n	8004f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8097 	beq.w	800508c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f62:	4b81      	ldr	r3, [pc, #516]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	4b7d      	ldr	r3, [pc, #500]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a7c      	ldr	r2, [pc, #496]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8e:	4b77      	ldr	r3, [pc, #476]	; (800516c <HAL_RCC_OscConfig+0x474>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d118      	bne.n	8004fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f9a:	4b74      	ldr	r3, [pc, #464]	; (800516c <HAL_RCC_OscConfig+0x474>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a73      	ldr	r2, [pc, #460]	; (800516c <HAL_RCC_OscConfig+0x474>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fa05 	bl	80013b4 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fae:	f7fc fa01 	bl	80013b4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e10c      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc0:	4b6a      	ldr	r3, [pc, #424]	; (800516c <HAL_RCC_OscConfig+0x474>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x2ea>
 8004fd4:	4b64      	ldr	r3, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	4a63      	ldr	r2, [pc, #396]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe0:	e01c      	b.n	800501c <HAL_RCC_OscConfig+0x324>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0x30c>
 8004fea:	4b5f      	ldr	r3, [pc, #380]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a5e      	ldr	r2, [pc, #376]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff6:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	4a5b      	ldr	r2, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6713      	str	r3, [r2, #112]	; 0x70
 8005002:	e00b      	b.n	800501c <HAL_RCC_OscConfig+0x324>
 8005004:	4b58      	ldr	r3, [pc, #352]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a57      	ldr	r2, [pc, #348]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
 8005010:	4b55      	ldr	r3, [pc, #340]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	4a54      	ldr	r2, [pc, #336]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d015      	beq.n	8005050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fc f9c6 	bl	80013b4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	e00a      	b.n	8005042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fc f9c2 	bl	80013b4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0cb      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	4b49      	ldr	r3, [pc, #292]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0ee      	beq.n	800502c <HAL_RCC_OscConfig+0x334>
 800504e:	e014      	b.n	800507a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005050:	f7fc f9b0 	bl	80013b4 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	e00a      	b.n	800506e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fc f9ac 	bl	80013b4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0b5      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506e:	4b3e      	ldr	r3, [pc, #248]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ee      	bne.n	8005058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	4a38      	ldr	r2, [pc, #224]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80a1 	beq.w	80051d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005096:	4b34      	ldr	r3, [pc, #208]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d05c      	beq.n	800515c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d141      	bne.n	800512e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <HAL_RCC_OscConfig+0x478>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fc f980 	bl	80013b4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fc f97c 	bl	80013b4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e087      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ca:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69da      	ldr	r2, [r3, #28]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	3b01      	subs	r3, #1
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	061b      	lsls	r3, r3, #24
 80050fa:	491b      	ldr	r1, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCC_OscConfig+0x478>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005106:	f7fc f955 	bl	80013b4 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510e:	f7fc f951 	bl	80013b4 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e05c      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x416>
 800512c:	e054      	b.n	80051d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <HAL_RCC_OscConfig+0x478>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fc f93e 	bl	80013b4 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513c:	f7fc f93a 	bl	80013b4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e045      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_OscConfig+0x470>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x444>
 800515a:	e03d      	b.n	80051d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e038      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
 8005168:	40023800 	.word	0x40023800
 800516c:	40007000 	.word	0x40007000
 8005170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_RCC_OscConfig+0x4ec>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d028      	beq.n	80051d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d121      	bne.n	80051d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d11a      	bne.n	80051d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051a4:	4013      	ands	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	3b01      	subs	r3, #1
 80051be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40023800 	.word	0x40023800

080051e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0cc      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051fc:	4b68      	ldr	r3, [pc, #416]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d90c      	bls.n	8005224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b63      	ldr	r3, [pc, #396]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0b8      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d020      	beq.n	8005272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800523c:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a58      	ldr	r2, [pc, #352]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a52      	ldr	r2, [pc, #328]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800525e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	494d      	ldr	r1, [pc, #308]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d044      	beq.n	8005308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d119      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e07f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d003      	beq.n	80052a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e06f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b6:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e067      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c6:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4934      	ldr	r1, [pc, #208]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052d8:	f7fc f86c 	bl	80013b4 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e0:	f7fc f868 	bl	80013b4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e04f      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 020c 	and.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	429a      	cmp	r2, r3
 8005306:	d1eb      	bne.n	80052e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005308:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d20c      	bcs.n	8005330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e032      	b.n	8005396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4916      	ldr	r1, [pc, #88]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	490e      	ldr	r1, [pc, #56]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800536e:	f000 f821 	bl	80053b4 <HAL_RCC_GetSysClockFreq>
 8005372:	4602      	mov	r2, r0
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	490a      	ldr	r1, [pc, #40]	; (80053a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	5ccb      	ldrb	r3, [r1, r3]
 8005382:	fa22 f303 	lsr.w	r3, r2, r3
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <HAL_RCC_ClockConfig+0x1c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fb ffcc 	bl	800132c <HAL_InitTick>

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023c00 	.word	0x40023c00
 80053a4:	40023800 	.word	0x40023800
 80053a8:	08009a6c 	.word	0x08009a6c
 80053ac:	20000008 	.word	0x20000008
 80053b0:	2000000c 	.word	0x2000000c

080053b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b8:	b094      	sub	sp, #80	; 0x50
 80053ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	2300      	movs	r3, #0
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	2300      	movs	r3, #0
 80053c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053cc:	4b79      	ldr	r3, [pc, #484]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d00d      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x40>
 80053d8:	2b08      	cmp	r3, #8
 80053da:	f200 80e1 	bhi.w	80055a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x34>
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d003      	beq.n	80053ee <HAL_RCC_GetSysClockFreq+0x3a>
 80053e6:	e0db      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053e8:	4b73      	ldr	r3, [pc, #460]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80053ec:	e0db      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ee:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_GetSysClockFreq+0x208>)
 80053f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f2:	e0d8      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053f4:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053fe:	4b6d      	ldr	r3, [pc, #436]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d063      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540a:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	099b      	lsrs	r3, r3, #6
 8005410:	2200      	movs	r2, #0
 8005412:	63bb      	str	r3, [r7, #56]	; 0x38
 8005414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541c:	633b      	str	r3, [r7, #48]	; 0x30
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
 8005422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005426:	4622      	mov	r2, r4
 8005428:	462b      	mov	r3, r5
 800542a:	f04f 0000 	mov.w	r0, #0
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	0159      	lsls	r1, r3, #5
 8005434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005438:	0150      	lsls	r0, r2, #5
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4621      	mov	r1, r4
 8005440:	1a51      	subs	r1, r2, r1
 8005442:	6139      	str	r1, [r7, #16]
 8005444:	4629      	mov	r1, r5
 8005446:	eb63 0301 	sbc.w	r3, r3, r1
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005458:	4659      	mov	r1, fp
 800545a:	018b      	lsls	r3, r1, #6
 800545c:	4651      	mov	r1, sl
 800545e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005462:	4651      	mov	r1, sl
 8005464:	018a      	lsls	r2, r1, #6
 8005466:	4651      	mov	r1, sl
 8005468:	ebb2 0801 	subs.w	r8, r2, r1
 800546c:	4659      	mov	r1, fp
 800546e:	eb63 0901 	sbc.w	r9, r3, r1
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005486:	4690      	mov	r8, r2
 8005488:	4699      	mov	r9, r3
 800548a:	4623      	mov	r3, r4
 800548c:	eb18 0303 	adds.w	r3, r8, r3
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	462b      	mov	r3, r5
 8005494:	eb49 0303 	adc.w	r3, r9, r3
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054a6:	4629      	mov	r1, r5
 80054a8:	024b      	lsls	r3, r1, #9
 80054aa:	4621      	mov	r1, r4
 80054ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054b0:	4621      	mov	r1, r4
 80054b2:	024a      	lsls	r2, r1, #9
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ba:	2200      	movs	r2, #0
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c4:	f7fa fe80 	bl	80001c8 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4613      	mov	r3, r2
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	e058      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d2:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	2200      	movs	r2, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	4611      	mov	r1, r2
 80054de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054e2:	623b      	str	r3, [r7, #32]
 80054e4:	2300      	movs	r3, #0
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	f04f 0000 	mov.w	r0, #0
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	0159      	lsls	r1, r3, #5
 80054fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054fe:	0150      	lsls	r0, r2, #5
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4641      	mov	r1, r8
 8005506:	ebb2 0a01 	subs.w	sl, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800551c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005524:	ebb2 040a 	subs.w	r4, r2, sl
 8005528:	eb63 050b 	sbc.w	r5, r3, fp
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	00eb      	lsls	r3, r5, #3
 8005536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800553a:	00e2      	lsls	r2, r4, #3
 800553c:	4614      	mov	r4, r2
 800553e:	461d      	mov	r5, r3
 8005540:	4643      	mov	r3, r8
 8005542:	18e3      	adds	r3, r4, r3
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	464b      	mov	r3, r9
 8005548:	eb45 0303 	adc.w	r3, r5, r3
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800555a:	4629      	mov	r1, r5
 800555c:	028b      	lsls	r3, r1, #10
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005564:	4621      	mov	r1, r4
 8005566:	028a      	lsls	r2, r1, #10
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556e:	2200      	movs	r2, #0
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	61fa      	str	r2, [r7, #28]
 8005574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005578:	f7fa fe26 	bl	80001c8 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	3301      	adds	r3, #1
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800559e:	e002      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80055a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3750      	adds	r7, #80	; 0x50
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	007a1200 	.word	0x007a1200

080055c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000008 	.word	0x20000008

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055dc:	f7ff fff0 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0a9b      	lsrs	r3, r3, #10
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40023800 	.word	0x40023800
 80055fc:	08009a7c 	.word	0x08009a7c

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005604:	f7ff ffdc 	bl	80055c0 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0b5b      	lsrs	r3, r3, #13
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	08009a7c 	.word	0x08009a7c

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800564c:	2b00      	cmp	r3, #0
 800564e:	d035      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005650:	4b62      	ldr	r3, [pc, #392]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005656:	f7fb fead 	bl	80013b4 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800565e:	f7fb fea9 	bl	80013b4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0b0      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005670:	4b5b      	ldr	r3, [pc, #364]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	019a      	lsls	r2, r3, #6
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	071b      	lsls	r3, r3, #28
 8005688:	4955      	ldr	r1, [pc, #340]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005690:	4b52      	ldr	r3, [pc, #328]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005696:	f7fb fe8d 	bl	80013b4 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800569e:	f7fb fe89 	bl	80013b4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e090      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b0:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8083 	beq.w	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	4b44      	ldr	r3, [pc, #272]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	4a43      	ldr	r2, [pc, #268]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6413      	str	r3, [r2, #64]	; 0x40
 80056da:	4b41      	ldr	r3, [pc, #260]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056e6:	4b3f      	ldr	r3, [pc, #252]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3e      	ldr	r2, [pc, #248]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056f2:	f7fb fe5f 	bl	80013b4 <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056fa:	f7fb fe5b 	bl	80013b4 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e062      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800570c:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005718:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005720:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d02f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d028      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005736:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005740:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005746:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d114      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800575e:	f7fb fe29 	bl	80013b4 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fb fe25 	bl	80013b4 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e02a      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ee      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005794:	d10d      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005796:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	490d      	ldr	r1, [pc, #52]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]
 80057b0:	e005      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057bc:	6093      	str	r3, [r2, #8]
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ca:	4905      	ldr	r1, [pc, #20]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	42470068 	.word	0x42470068
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42470e40 	.word	0x42470e40

080057ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d13e      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d12f      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005822:	617b      	str	r3, [r7, #20]
          break;
 8005824:	e02f      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005826:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005832:	d108      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005834:	4b18      	ldr	r3, [pc, #96]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e007      	b.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584e:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005850:	fbb2 f3f3 	udiv	r3, r2, r3
 8005854:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800586c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005870:	0f1b      	lsrs	r3, r3, #28
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
          break;
 800587e:	e002      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
          break;
 8005884:	bf00      	nop
        }
      }
      break;
 8005886:	bf00      	nop
    }
  }
  return frequency;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
 800589c:	00bb8000 	.word	0x00bb8000
 80058a0:	007a1200 	.word	0x007a1200
 80058a4:	00f42400 	.word	0x00f42400

080058a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e07b      	b.n	80059b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ca:	d009      	beq.n	80058e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	61da      	str	r2, [r3, #28]
 80058d2:	e005      	b.n	80058e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb fb86 	bl	800100c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	ea42 0103 	orr.w	r1, r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	0c1b      	lsrs	r3, r3, #16
 800597e:	f003 0104 	and.w	r1, r3, #4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f003 0210 	and.w	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e03f      	b.n	8005a4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb fb5b 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f996 	bl	8005d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d17c      	bne.n	8005b6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UART_Transmit+0x2c>
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e075      	b.n	8005b70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x3e>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e06e      	b.n	8005b70 <HAL_UART_Transmit+0x11c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa8:	f7fb fc84 	bl	80013b4 <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	d108      	bne.n	8005ad6 <HAL_UART_Transmit+0x82>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e003      	b.n	8005ade <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ae6:	e02a      	b.n	8005b3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2200      	movs	r2, #0
 8005af0:	2180      	movs	r1, #128	; 0x80
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f870 	bl	8005bd8 <UART_WaitOnFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e036      	b.n	8005b70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e007      	b.n	8005b30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1cf      	bne.n	8005ae8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f840 	bl	8005bd8 <UART_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e006      	b.n	8005b70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d11d      	bne.n	8005bce <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_UART_Receive_IT+0x26>
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e016      	b.n	8005bd0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Receive_IT+0x38>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e00f      	b.n	8005bd0 <HAL_UART_Receive_IT+0x58>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f875 	bl	8005cb4 <UART_Start_Receive_IT>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	e000      	b.n	8005bd0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
  }
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b090      	sub	sp, #64	; 0x40
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be8:	e050      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d04c      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bf8:	f7fb fbdc 	bl	80013b4 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d241      	bcs.n	8005c8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c28:	637a      	str	r2, [r7, #52]	; 0x34
 8005c2a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3314      	adds	r3, #20
 8005c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5c:	623a      	str	r2, [r7, #32]
 8005c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	6a3a      	ldr	r2, [r7, #32]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e00f      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d09f      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3740      	adds	r7, #64	; 0x40
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2222      	movs	r2, #34	; 0x22
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0220 	orr.w	r2, r2, #32
 8005d20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d34:	b0c0      	sub	sp, #256	; 0x100
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	68d9      	ldr	r1, [r3, #12]
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	ea40 0301 	orr.w	r3, r0, r1
 8005d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d88:	f021 010c 	bic.w	r1, r1, #12
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d96:	430b      	orrs	r3, r1
 8005d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	6999      	ldr	r1, [r3, #24]
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	ea40 0301 	orr.w	r3, r0, r1
 8005db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b8f      	ldr	r3, [pc, #572]	; (8005ffc <UART_SetConfig+0x2cc>)
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d005      	beq.n	8005dd0 <UART_SetConfig+0xa0>
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b8d      	ldr	r3, [pc, #564]	; (8006000 <UART_SetConfig+0x2d0>)
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d104      	bne.n	8005dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f7ff fc16 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8005dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005dd8:	e003      	b.n	8005de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dda:	f7ff fbfd 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8005dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dec:	f040 810c 	bne.w	8006008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	1891      	adds	r1, r2, r2
 8005e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0a:	415b      	adcs	r3, r3
 8005e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e12:	4621      	mov	r1, r4
 8005e14:	eb12 0801 	adds.w	r8, r2, r1
 8005e18:	4629      	mov	r1, r5
 8005e1a:	eb43 0901 	adc.w	r9, r3, r1
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e32:	4690      	mov	r8, r2
 8005e34:	4699      	mov	r9, r3
 8005e36:	4623      	mov	r3, r4
 8005e38:	eb18 0303 	adds.w	r3, r8, r3
 8005e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e40:	462b      	mov	r3, r5
 8005e42:	eb49 0303 	adc.w	r3, r9, r3
 8005e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e5e:	460b      	mov	r3, r1
 8005e60:	18db      	adds	r3, r3, r3
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
 8005e64:	4613      	mov	r3, r2
 8005e66:	eb42 0303 	adc.w	r3, r2, r3
 8005e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e74:	f7fa f9a8 	bl	80001c8 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <UART_SetConfig+0x2d4>)
 8005e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	011c      	lsls	r4, r3, #4
 8005e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8005eae:	4649      	mov	r1, r9
 8005eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec8:	4692      	mov	sl, r2
 8005eca:	469b      	mov	fp, r3
 8005ecc:	4643      	mov	r3, r8
 8005ece:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8005edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	18db      	adds	r3, r3, r3
 8005ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8005efa:	4613      	mov	r3, r2
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f0a:	f7fa f95d 	bl	80001c8 <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	4b3b      	ldr	r3, [pc, #236]	; (8006004 <UART_SetConfig+0x2d4>)
 8005f16:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2264      	movs	r2, #100	; 0x64
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	1acb      	subs	r3, r1, r3
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <UART_SetConfig+0x2d4>)
 8005f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f38:	441c      	add	r4, r3
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f54:	415b      	adcs	r3, r3
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	1851      	adds	r1, r2, r1
 8005f60:	6339      	str	r1, [r7, #48]	; 0x30
 8005f62:	4649      	mov	r1, r9
 8005f64:	414b      	adcs	r3, r1
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f74:	4659      	mov	r1, fp
 8005f76:	00cb      	lsls	r3, r1, #3
 8005f78:	4651      	mov	r1, sl
 8005f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7e:	4651      	mov	r1, sl
 8005f80:	00ca      	lsls	r2, r1, #3
 8005f82:	4610      	mov	r0, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	4642      	mov	r2, r8
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f90:	464b      	mov	r3, r9
 8005f92:	460a      	mov	r2, r1
 8005f94:	eb42 0303 	adc.w	r3, r2, r3
 8005f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	18db      	adds	r3, r3, r3
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fc6:	f7fa f8ff 	bl	80001c8 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <UART_SetConfig+0x2d4>)
 8005fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	3332      	adds	r3, #50	; 0x32
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <UART_SetConfig+0x2d4>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 0207 	and.w	r2, r3, #7
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4422      	add	r2, r4
 8005ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff8:	e105      	b.n	8006206 <UART_SetConfig+0x4d6>
 8005ffa:	bf00      	nop
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40011400 	.word	0x40011400
 8006004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600c:	2200      	movs	r2, #0
 800600e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800601a:	4642      	mov	r2, r8
 800601c:	464b      	mov	r3, r9
 800601e:	1891      	adds	r1, r2, r2
 8006020:	6239      	str	r1, [r7, #32]
 8006022:	415b      	adcs	r3, r3
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
 8006026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602a:	4641      	mov	r1, r8
 800602c:	1854      	adds	r4, r2, r1
 800602e:	4649      	mov	r1, r9
 8006030:	eb43 0501 	adc.w	r5, r3, r1
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	00eb      	lsls	r3, r5, #3
 800603e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006042:	00e2      	lsls	r2, r4, #3
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4643      	mov	r3, r8
 800604a:	18e3      	adds	r3, r4, r3
 800604c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006050:	464b      	mov	r3, r9
 8006052:	eb45 0303 	adc.w	r3, r5, r3
 8006056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006076:	4629      	mov	r1, r5
 8006078:	008b      	lsls	r3, r1, #2
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006080:	4621      	mov	r1, r4
 8006082:	008a      	lsls	r2, r1, #2
 8006084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006088:	f7fa f89e 	bl	80001c8 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4b60      	ldr	r3, [pc, #384]	; (8006214 <UART_SetConfig+0x4e4>)
 8006092:	fba3 2302 	umull	r2, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	011c      	lsls	r4, r3, #4
 800609a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	1891      	adds	r1, r2, r2
 80060b2:	61b9      	str	r1, [r7, #24]
 80060b4:	415b      	adcs	r3, r3
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060bc:	4641      	mov	r1, r8
 80060be:	1851      	adds	r1, r2, r1
 80060c0:	6139      	str	r1, [r7, #16]
 80060c2:	4649      	mov	r1, r9
 80060c4:	414b      	adcs	r3, r1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d4:	4659      	mov	r1, fp
 80060d6:	00cb      	lsls	r3, r1, #3
 80060d8:	4651      	mov	r1, sl
 80060da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060de:	4651      	mov	r1, sl
 80060e0:	00ca      	lsls	r2, r1, #3
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	4642      	mov	r2, r8
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f0:	464b      	mov	r3, r9
 80060f2:	460a      	mov	r2, r1
 80060f4:	eb42 0303 	adc.w	r3, r2, r3
 80060f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	67bb      	str	r3, [r7, #120]	; 0x78
 8006106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006114:	4649      	mov	r1, r9
 8006116:	008b      	lsls	r3, r1, #2
 8006118:	4641      	mov	r1, r8
 800611a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611e:	4641      	mov	r1, r8
 8006120:	008a      	lsls	r2, r1, #2
 8006122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006126:	f7fa f84f 	bl	80001c8 <__aeabi_uldivmod>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4b39      	ldr	r3, [pc, #228]	; (8006214 <UART_SetConfig+0x4e4>)
 8006130:	fba3 1302 	umull	r1, r3, r3, r2
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	2164      	movs	r1, #100	; 0x64
 8006138:	fb01 f303 	mul.w	r3, r1, r3
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	3332      	adds	r3, #50	; 0x32
 8006142:	4a34      	ldr	r2, [pc, #208]	; (8006214 <UART_SetConfig+0x4e4>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800614e:	441c      	add	r4, r3
 8006150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006154:	2200      	movs	r2, #0
 8006156:	673b      	str	r3, [r7, #112]	; 0x70
 8006158:	677a      	str	r2, [r7, #116]	; 0x74
 800615a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800615e:	4642      	mov	r2, r8
 8006160:	464b      	mov	r3, r9
 8006162:	1891      	adds	r1, r2, r2
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	415b      	adcs	r3, r3
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800616e:	4641      	mov	r1, r8
 8006170:	1851      	adds	r1, r2, r1
 8006172:	6039      	str	r1, [r7, #0]
 8006174:	4649      	mov	r1, r9
 8006176:	414b      	adcs	r3, r1
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006186:	4659      	mov	r1, fp
 8006188:	00cb      	lsls	r3, r1, #3
 800618a:	4651      	mov	r1, sl
 800618c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006190:	4651      	mov	r1, sl
 8006192:	00ca      	lsls	r2, r1, #3
 8006194:	4610      	mov	r0, r2
 8006196:	4619      	mov	r1, r3
 8006198:	4603      	mov	r3, r0
 800619a:	4642      	mov	r2, r8
 800619c:	189b      	adds	r3, r3, r2
 800619e:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a0:	464b      	mov	r3, r9
 80061a2:	460a      	mov	r2, r1
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	663b      	str	r3, [r7, #96]	; 0x60
 80061b4:	667a      	str	r2, [r7, #100]	; 0x64
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061c2:	4649      	mov	r1, r9
 80061c4:	008b      	lsls	r3, r1, #2
 80061c6:	4641      	mov	r1, r8
 80061c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061cc:	4641      	mov	r1, r8
 80061ce:	008a      	lsls	r2, r1, #2
 80061d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061d4:	f7f9 fff8 	bl	80001c8 <__aeabi_uldivmod>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <UART_SetConfig+0x4e4>)
 80061de:	fba3 1302 	umull	r1, r3, r3, r2
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2164      	movs	r1, #100	; 0x64
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	3332      	adds	r3, #50	; 0x32
 80061f0:	4a08      	ldr	r2, [pc, #32]	; (8006214 <UART_SetConfig+0x4e4>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	f003 020f 	and.w	r2, r3, #15
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4422      	add	r2, r4
 8006204:	609a      	str	r2, [r3, #8]
}
 8006206:	bf00      	nop
 8006208:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	51eb851f 	.word	0x51eb851f

08006218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006218:	b084      	sub	sp, #16
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	f107 001c 	add.w	r0, r7, #28
 8006226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b01      	cmp	r3, #1
 800622e:	d122      	bne.n	8006276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9c0 	bl	80065f0 <USB_CoreReset>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e01a      	b.n	80062ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9b4 	bl	80065f0 <USB_CoreReset>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800628c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
 800629e:	e005      	b.n	80062ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10b      	bne.n	80062ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f043 0206 	orr.w	r2, r3, #6
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d6:	b004      	add	sp, #16
 80062d8:	4770      	bx	lr

080062da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f043 0201 	orr.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f023 0201 	bic.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d115      	bne.n	800636c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800634c:	2001      	movs	r0, #1
 800634e:	f7fb f83d 	bl	80013cc <HAL_Delay>
      ms++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f93a 	bl	80065d2 <USB_GetMode>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d01e      	beq.n	80063a2 <USB_SetCurrentMode+0x84>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b31      	cmp	r3, #49	; 0x31
 8006368:	d9f0      	bls.n	800634c <USB_SetCurrentMode+0x2e>
 800636a:	e01a      	b.n	80063a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d115      	bne.n	800639e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800637e:	2001      	movs	r0, #1
 8006380:	f7fb f824 	bl	80013cc <HAL_Delay>
      ms++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f921 	bl	80065d2 <USB_GetMode>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <USB_SetCurrentMode+0x84>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b31      	cmp	r3, #49	; 0x31
 800639a:	d9f0      	bls.n	800637e <USB_SetCurrentMode+0x60>
 800639c:	e001      	b.n	80063a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e005      	b.n	80063ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b32      	cmp	r3, #50	; 0x32
 80063a6:	d101      	bne.n	80063ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <USB_FlushTxFifo+0x64>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e01b      	b.n	8006410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	daf2      	bge.n	80063c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	019b      	lsls	r3, r3, #6
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a08      	ldr	r2, [pc, #32]	; (800641c <USB_FlushTxFifo+0x64>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e006      	b.n	8006410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b20      	cmp	r3, #32
 800640c:	d0f0      	beq.n	80063f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	00030d40 	.word	0x00030d40

08006420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a11      	ldr	r2, [pc, #68]	; (800647c <USB_FlushRxFifo+0x5c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e018      	b.n	8006470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	daf2      	bge.n	800642c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2210      	movs	r2, #16
 800644e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <USB_FlushRxFifo+0x5c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e006      	b.n	8006470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d0f0      	beq.n	8006450 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	00030d40 	.word	0x00030d40

08006480 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	460b      	mov	r3, r1
 8006490:	71fb      	strb	r3, [r7, #7]
 8006492:	4613      	mov	r3, r2
 8006494:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800649e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d123      	bne.n	80064ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	3303      	adds	r3, #3
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e018      	b.n	80064e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	031a      	lsls	r2, r3, #12
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c0:	461a      	mov	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3e2      	bcc.n	80064b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3724      	adds	r7, #36	; 0x24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b08b      	sub	sp, #44	; 0x2c
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	089b      	lsrs	r3, r3, #2
 8006516:	b29b      	uxth	r3, r3
 8006518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	e014      	b.n	8006552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	601a      	str	r2, [r3, #0]
    pDest++;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	3301      	adds	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	3301      	adds	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	3301      	adds	r3, #1
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	3301      	adds	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	3301      	adds	r3, #1
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3a      	ldr	r2, [r7, #32]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d3e6      	bcc.n	8006528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800655a:	8bfb      	ldrh	r3, [r7, #30]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	461a      	mov	r2, r3
 800656c:	f107 0310 	add.w	r3, r7, #16
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	701a      	strb	r2, [r3, #0]
      i++;
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	3301      	adds	r3, #1
 800658a:	623b      	str	r3, [r7, #32]
      pDest++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006592:	8bfb      	ldrh	r3, [r7, #30]
 8006594:	3b01      	subs	r3, #1
 8006596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006598:	8bfb      	ldrh	r3, [r7, #30]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ea      	bne.n	8006574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	372c      	adds	r7, #44	; 0x2c
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065c4:	68fb      	ldr	r3, [r7, #12]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f003 0301 	and.w	r3, r3, #1
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4a13      	ldr	r2, [pc, #76]	; (8006654 <USB_CoreReset+0x64>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e01b      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	daf2      	bge.n	80065fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <USB_CoreReset+0x64>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d0f0      	beq.n	8006626 <USB_CoreReset+0x36>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	00030d40 	.word	0x00030d40

08006658 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d018      	beq.n	80066e0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10a      	bne.n	80066ca <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c2:	f043 0304 	orr.w	r3, r3, #4
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e014      	b.n	80066f4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d8:	f023 0304 	bic.w	r3, r3, #4
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e009      	b.n	80066f4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ee:	f023 0304 	bic.w	r3, r3, #4
 80066f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066f4:	2110      	movs	r1, #16
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fe5e 	bl	80063b8 <USB_FlushTxFifo>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff fe8a 	bl	8006420 <USB_FlushRxFifo>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	e015      	b.n	8006748 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	461a      	mov	r2, r3
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	461a      	mov	r2, r3
 800673e:	2300      	movs	r3, #0
 8006740:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3301      	adds	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d3e5      	bcc.n	800671c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <USB_HostInit+0x16c>)
 8006776:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <USB_HostInit+0x170>)
 800677c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006780:	e009      	b.n	8006796 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a10      	ldr	r2, [pc, #64]	; (80067cc <USB_HostInit+0x174>)
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <USB_HostInit+0x178>)
 8006792:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f043 0210 	orr.w	r2, r3, #16
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <USB_HostInit+0x17c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c0:	b004      	add	sp, #16
 80067c2:	4770      	bx	lr
 80067c4:	01000200 	.word	0x01000200
 80067c8:	00e00300 	.word	0x00e00300
 80067cc:	00600080 	.word	0x00600080
 80067d0:	004000e0 	.word	0x004000e0
 80067d4:	a3200008 	.word	0xa3200008

080067d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006810:	4313      	orrs	r3, r2
 8006812:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006820:	461a      	mov	r2, r3
 8006822:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006826:	6053      	str	r3, [r2, #4]
 8006828:	e009      	b.n	800683e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d106      	bne.n	800683e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006836:	461a      	mov	r2, r3
 8006838:	f241 7370 	movw	r3, #6000	; 0x1770
 800683c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800686c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800687c:	2064      	movs	r0, #100	; 0x64
 800687e:	f7fa fda5 	bl	80013cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800688a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800688e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006890:	200a      	movs	r0, #10
 8006892:	f7fa fd9b 	bl	80013cc <HAL_Delay>

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <USB_DriveVbus+0x44>
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d106      	bne.n	80068e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	d109      	bne.n	8006904 <USB_DriveVbus+0x64>
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006902:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	0c5b      	lsrs	r3, r3, #17
 8006930:	f003 0303 	and.w	r3, r3, #3
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	b29b      	uxth	r3, r3
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	70fb      	strb	r3, [r7, #3]
 8006976:	460b      	mov	r3, r1
 8006978:	70bb      	strb	r3, [r7, #2]
 800697a:	4613      	mov	r3, r2
 800697c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006992:	461a      	mov	r2, r3
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800699a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d87e      	bhi.n	8006aa0 <USB_HC_Init+0x13c>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <USB_HC_Init+0x44>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	08006a63 	.word	0x08006a63
 80069b0:	080069b9 	.word	0x080069b9
 80069b4:	08006a25 	.word	0x08006a25
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c4:	461a      	mov	r2, r3
 80069c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80069ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80069cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da10      	bge.n	80069f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80069f4:	e057      	b.n	8006aa6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d051      	beq.n	8006aa6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a20:	60d3      	str	r3, [r2, #12]
      break;
 8006a22:	e040      	b.n	8006aa6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	461a      	mov	r2, r3
 8006a32:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da34      	bge.n	8006aaa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a60:	e023      	b.n	8006aaa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f240 2325 	movw	r3, #549	; 0x225
 8006a74:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da17      	bge.n	8006aae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a98:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006a9c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a9e:	e006      	b.n	8006aae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	77fb      	strb	r3, [r7, #31]
      break;
 8006aa4:	e004      	b.n	8006ab0 <USB_HC_Init+0x14c>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <USB_HC_Init+0x14c>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <USB_HC_Init+0x14c>
      break;
 8006aae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	2101      	movs	r1, #1
 8006ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae4:	6939      	ldr	r1, [r7, #16]
 8006ae6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006aea:	4313      	orrs	r3, r2
 8006aec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006afa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da03      	bge.n	8006b0a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e001      	b.n	8006b0e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff feff 	bl	8006912 <USB_GetHostSpeed>
 8006b14:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d106      	bne.n	8006b2c <USB_HC_Init+0x1c8>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d003      	beq.n	8006b2c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e001      	b.n	8006b30 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b30:	787b      	ldrb	r3, [r7, #1]
 8006b32:	059b      	lsls	r3, r3, #22
 8006b34:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b38:	78bb      	ldrb	r3, [r7, #2]
 8006b3a:	02db      	lsls	r3, r3, #11
 8006b3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b40:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b46:	049b      	lsls	r3, r3, #18
 8006b48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	0159      	lsls	r1, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	440b      	add	r3, r1
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b6c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d003      	beq.n	8006b7e <USB_HC_Init+0x21a>
 8006b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d10f      	bne.n	8006b9e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08c      	sub	sp, #48	; 0x30
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bc4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02d      	beq.n	8006c2e <USB_HC_StartXfer+0x86>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d129      	bne.n	8006c2e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d117      	bne.n	8006c10 <USB_HC_StartXfer+0x68>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	79db      	ldrb	r3, [r3, #7]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <USB_HC_StartXfer+0x48>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	79db      	ldrb	r3, [r3, #7]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d10f      	bne.n	8006c10 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	6a3a      	ldr	r2, [r7, #32]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <USB_HC_StartXfer+0x86>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d107      	bne.n	8006c2e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	4619      	mov	r1, r3
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fa0f 	bl	8007048 <USB_DoPing>
      return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e0f8      	b.n	8006e20 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d018      	beq.n	8006c68 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	8912      	ldrh	r2, [r2, #8]
 8006c3e:	4413      	add	r3, r2
 8006c40:	3b01      	subs	r3, #1
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	8912      	ldrh	r2, [r2, #8]
 8006c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c4e:	8b7b      	ldrh	r3, [r7, #26]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d90b      	bls.n	8006c6c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006c54:	8b7b      	ldrh	r3, [r7, #26]
 8006c56:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	8912      	ldrh	r2, [r2, #8]
 8006c5e:	fb03 f202 	mul.w	r2, r3, r2
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	611a      	str	r2, [r3, #16]
 8006c66:	e001      	b.n	8006c6c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	8912      	ldrh	r2, [r2, #8]
 8006c7a:	fb03 f202 	mul.w	r2, r3, r2
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	611a      	str	r2, [r3, #16]
 8006c82:	e003      	b.n	8006c8c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c96:	04d9      	lsls	r1, r3, #19
 8006c98:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <USB_HC_StartXfer+0x280>)
 8006c9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	7a9b      	ldrb	r3, [r3, #10]
 8006ca2:	075b      	lsls	r3, r3, #29
 8006ca4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	0148      	lsls	r0, r1, #5
 8006cac:	6a39      	ldr	r1, [r7, #32]
 8006cae:	4401      	add	r1, r0
 8006cb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68d9      	ldr	r1, [r3, #12]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	460a      	mov	r2, r1
 8006cd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bf0c      	ite	eq
 8006ce2:	2301      	moveq	r3, #1
 8006ce4:	2300      	movne	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	7e7b      	ldrb	r3, [r7, #25]
 8006d1a:	075b      	lsls	r3, r3, #29
 8006d1c:	69f9      	ldr	r1, [r7, #28]
 8006d1e:	0148      	lsls	r0, r1, #5
 8006d20:	6a39      	ldr	r1, [r7, #32]
 8006d22:	4401      	add	r1, r0
 8006d24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d42:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	78db      	ldrb	r3, [r3, #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e003      	b.n	8006d5e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d5c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d72:	461a      	mov	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e04e      	b.n	8006e20 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	78db      	ldrb	r3, [r3, #3]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d149      	bne.n	8006e1e <USB_HC_StartXfer+0x276>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d045      	beq.n	8006e1e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	79db      	ldrb	r3, [r3, #7]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d830      	bhi.n	8006dfc <USB_HC_StartXfer+0x254>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <USB_HC_StartXfer+0x1f8>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dd5 	.word	0x08006dd5
 8006da8:	08006db1 	.word	0x08006db1
 8006dac:	08006dd5 	.word	0x08006dd5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	3303      	adds	r3, #3
 8006db6:	089b      	lsrs	r3, r3, #2
 8006db8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dba:	8afa      	ldrh	r2, [r7, #22]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d91c      	bls.n	8006e00 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f043 0220 	orr.w	r2, r3, #32
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dd2:	e015      	b.n	8006e00 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006dde:	8afa      	ldrh	r2, [r7, #22]
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90a      	bls.n	8006e04 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dfa:	e003      	b.n	8006e04 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <USB_HC_StartXfer+0x25e>
        break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <USB_HC_StartXfer+0x25e>
        break;
 8006e04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68d9      	ldr	r1, [r3, #12]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	785a      	ldrb	r2, [r3, #1]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2000      	movs	r0, #0
 8006e16:	9000      	str	r0, [sp, #0]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff fb31 	bl	8006480 <USB_WritePacket>
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3728      	adds	r7, #40	; 0x28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	1ff80000 	.word	0x1ff80000

08006e2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	b29b      	uxth	r3, r3
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b089      	sub	sp, #36	; 0x24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	0c9b      	lsrs	r3, r3, #18
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	0fdb      	lsrs	r3, r3, #31
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d104      	bne.n	8006ea8 <USB_HC_Halt+0x5a>
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e0c8      	b.n	800703a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <USB_HC_Halt+0x66>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d163      	bne.n	8006f7c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 0320 	and.w	r3, r3, #32
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 80ab 	bne.w	8007038 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d133      	bne.n	8006f56 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3a:	d81d      	bhi.n	8006f78 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f52:	d0ec      	beq.n	8006f2e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f54:	e070      	b.n	8007038 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f76:	e05f      	b.n	8007038 <USB_HC_Halt+0x1ea>
            break;
 8006f78:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f7a:	e05d      	b.n	8007038 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f9a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d133      	bne.n	8007014 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff8:	d81d      	bhi.n	8007036 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007010:	d0ec      	beq.n	8006fec <USB_HC_Halt+0x19e>
 8007012:	e011      	b.n	8007038 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800702e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	e000      	b.n	8007038 <USB_HC_Halt+0x1ea>
          break;
 8007036:	bf00      	nop
    }
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3724      	adds	r7, #36	; 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800705c:	2301      	movs	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	04da      	lsls	r2, r3, #19
 8007064:	4b15      	ldr	r3, [pc, #84]	; (80070bc <USB_DoPing+0x74>)
 8007066:	4013      	ands	r3, r2
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	440a      	add	r2, r1
 8007070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007078:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007090:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007098:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	461a      	mov	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	1ff80000 	.word	0x1ff80000

080070c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff f911 	bl	80062fc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070da:	2110      	movs	r1, #16
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff f96b 	bl	80063b8 <USB_FlushTxFifo>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff f997 	bl	8006420 <USB_FlushRxFifo>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e01f      	b.n	8007142 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007118:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007120:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007128:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	461a      	mov	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	3301      	adds	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b0f      	cmp	r3, #15
 8007146:	d9dc      	bls.n	8007102 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007148:	2300      	movs	r3, #0
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	e034      	b.n	80071b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	4413      	add	r3, r2
 8007156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007164:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800716c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007174:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007182:	461a      	mov	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007194:	d80c      	bhi.n	80071b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ac:	d0ec      	beq.n	8007188 <USB_StopHost+0xc8>
 80071ae:	e000      	b.n	80071b2 <USB_StopHost+0xf2>
        break;
 80071b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3301      	adds	r3, #1
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b0f      	cmp	r3, #15
 80071bc:	d9c7      	bls.n	800714e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c4:	461a      	mov	r2, r3
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff f880 	bl	80062da <USB_EnableGlobalInt>

  return ret;
 80071da:	7ffb      	ldrb	r3, [r7, #31]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071ec:	2301      	movs	r3, #1
 80071ee:	2202      	movs	r2, #2
 80071f0:	2102      	movs	r1, #2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fc66 	bl	8007ac4 <USBH_FindInterface>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2bff      	cmp	r3, #255	; 0xff
 8007200:	d002      	beq.n	8007208 <USBH_CDC_InterfaceInit+0x24>
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d901      	bls.n	800720c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007208:	2302      	movs	r3, #2
 800720a:	e13d      	b.n	8007488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc3b 	bl	8007a8c <USBH_SelectInterface>
 8007216:	4603      	mov	r3, r0
 8007218:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007220:	2302      	movs	r3, #2
 8007222:	e131      	b.n	8007488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800722a:	2050      	movs	r0, #80	; 0x50
 800722c:	f002 fafa 	bl	8009824 <malloc>
 8007230:	4603      	mov	r3, r0
 8007232:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007244:	2302      	movs	r3, #2
 8007246:	e11f      	b.n	8007488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007248:	2250      	movs	r2, #80	; 0x50
 800724a:	2100      	movs	r1, #0
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f002 faf9 	bl	8009844 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	211a      	movs	r1, #26
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	4413      	add	r3, r2
 800725e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b25b      	sxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	da15      	bge.n	8007296 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	211a      	movs	r1, #26
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800727a:	781a      	ldrb	r2, [r3, #0]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	211a      	movs	r1, #26
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007290:	881a      	ldrh	r2, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 ff2c 	bl	80090fa <USBH_AllocPipe>
 80072a2:	4603      	mov	r3, r0
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	7819      	ldrb	r1, [r3, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	7858      	ldrb	r0, [r3, #1]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	8952      	ldrh	r2, [r2, #10]
 80072c2:	9202      	str	r2, [sp, #8]
 80072c4:	2203      	movs	r2, #3
 80072c6:	9201      	str	r2, [sp, #4]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4623      	mov	r3, r4
 80072cc:	4602      	mov	r2, r0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fee4 	bl	800909c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2200      	movs	r2, #0
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 f9f3 	bl	80096c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072e2:	2300      	movs	r3, #0
 80072e4:	2200      	movs	r2, #0
 80072e6:	210a      	movs	r1, #10
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fbeb 	bl	8007ac4 <USBH_FindInterface>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2bff      	cmp	r3, #255	; 0xff
 80072f6:	d002      	beq.n	80072fe <USBH_CDC_InterfaceInit+0x11a>
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d901      	bls.n	8007302 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072fe:	2302      	movs	r3, #2
 8007300:	e0c2      	b.n	8007488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	211a      	movs	r1, #26
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b25b      	sxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	da16      	bge.n	8007348 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	211a      	movs	r1, #26
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	4413      	add	r3, r2
 8007326:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	211a      	movs	r1, #26
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	4413      	add	r3, r2
 800733c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007340:	881a      	ldrh	r2, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	835a      	strh	r2, [r3, #26]
 8007346:	e015      	b.n	8007374 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	211a      	movs	r1, #26
 800734e:	fb01 f303 	mul.w	r3, r1, r3
 8007352:	4413      	add	r3, r2
 8007354:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	211a      	movs	r1, #26
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	4413      	add	r3, r2
 800736a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	211a      	movs	r1, #26
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	4413      	add	r3, r2
 8007380:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b25b      	sxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	da16      	bge.n	80073ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	211a      	movs	r1, #26
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	4413      	add	r3, r2
 8007398:	f203 3356 	addw	r3, r3, #854	; 0x356
 800739c:	781a      	ldrb	r2, [r3, #0]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	211a      	movs	r1, #26
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073b2:	881a      	ldrh	r2, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	835a      	strh	r2, [r3, #26]
 80073b8:	e015      	b.n	80073e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	211a      	movs	r1, #26
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	211a      	movs	r1, #26
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	7b9b      	ldrb	r3, [r3, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 fe84 	bl	80090fa <USBH_AllocPipe>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	7bdb      	ldrb	r3, [r3, #15]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fe7a 	bl	80090fa <USBH_AllocPipe>
 8007406:	4603      	mov	r3, r0
 8007408:	461a      	mov	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	7b59      	ldrb	r1, [r3, #13]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	7b98      	ldrb	r0, [r3, #14]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	8b12      	ldrh	r2, [r2, #24]
 8007426:	9202      	str	r2, [sp, #8]
 8007428:	2202      	movs	r2, #2
 800742a:	9201      	str	r2, [sp, #4]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	4623      	mov	r3, r4
 8007430:	4602      	mov	r2, r0
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fe32 	bl	800909c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	7b19      	ldrb	r1, [r3, #12]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	7bd8      	ldrb	r0, [r3, #15]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	8b52      	ldrh	r2, [r2, #26]
 8007450:	9202      	str	r2, [sp, #8]
 8007452:	2202      	movs	r2, #2
 8007454:	9201      	str	r2, [sp, #4]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4623      	mov	r3, r4
 800745a:	4602      	mov	r2, r0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe1d 	bl	800909c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	7b5b      	ldrb	r3, [r3, #13]
 800746e:	2200      	movs	r2, #0
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 f928 	bl	80096c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	7b1b      	ldrb	r3, [r3, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 f921 	bl	80096c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fe12 	bl	80090da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 fe3d 	bl	800913c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	7b1b      	ldrb	r3, [r3, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	7b1b      	ldrb	r3, [r3, #12]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fdff 	bl	80090da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	7b1b      	ldrb	r3, [r3, #12]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fe2a 	bl	800913c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	7b5b      	ldrb	r3, [r3, #13]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00e      	beq.n	8007514 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	7b5b      	ldrb	r3, [r3, #13]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fdec 	bl	80090da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	7b5b      	ldrb	r3, [r3, #13]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fe17 	bl	800913c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4618      	mov	r0, r3
 800752a:	f002 f983 	bl	8009834 <free>
    phost->pActiveClass->pData = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007534:	2200      	movs	r2, #0
 8007536:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3340      	adds	r3, #64	; 0x40
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8b1 	bl	80076c2 <GetLineCoding>
 8007560:	4603      	mov	r3, r0
 8007562:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007570:	2102      	movs	r1, #2
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007576:	7afb      	ldrb	r3, [r7, #11]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d877      	bhi.n	8007694 <USBH_CDC_Process+0x114>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <USBH_CDC_Process+0x2c>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075c1 	.word	0x080075c1
 80075b0:	080075c7 	.word	0x080075c7
 80075b4:	080075f7 	.word	0x080075f7
 80075b8:	0800766b 	.word	0x0800766b
 80075bc:	08007679 	.word	0x08007679
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
      break;
 80075c4:	e06d      	b.n	80076a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f897 	bl	8007700 <SetLineCoding>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075e4:	e058      	b.n	8007698 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d055      	beq.n	8007698 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2204      	movs	r2, #4
 80075f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075f4:	e050      	b.n	8007698 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	3340      	adds	r3, #64	; 0x40
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f860 	bl	80076c2 <GetLineCoding>
 8007602:	4603      	mov	r3, r0
 8007604:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d126      	bne.n	800765a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d13b      	bne.n	800769c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007630:	429a      	cmp	r2, r3
 8007632:	d133      	bne.n	800769c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007640:	429a      	cmp	r2, r3
 8007642:	d12b      	bne.n	800769c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800764e:	429a      	cmp	r2, r3
 8007650:	d124      	bne.n	800769c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f958 	bl	8007908 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007658:	e020      	b.n	800769c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d01d      	beq.n	800769c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2204      	movs	r2, #4
 8007664:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007668:	e018      	b.n	800769c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f867 	bl	800773e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8da 	bl	800782a <CDC_ProcessReception>
      break;
 8007676:	e014      	b.n	80076a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007678:	2100      	movs	r1, #0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 ffef 	bl	800865e <USBH_ClrFeature>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007692:	e005      	b.n	80076a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007694:	bf00      	nop
 8007696:	e004      	b.n	80076a2 <USBH_CDC_Process+0x122>
      break;
 8007698:	bf00      	nop
 800769a:	e002      	b.n	80076a2 <USBH_CDC_Process+0x122>
      break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <USBH_CDC_Process+0x122>
      break;
 80076a0:	bf00      	nop

  }

  return status;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	22a1      	movs	r2, #161	; 0xa1
 80076d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2221      	movs	r2, #33	; 0x21
 80076d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2207      	movs	r2, #7
 80076e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2207      	movs	r2, #7
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fa81 	bl	8008bf8 <USBH_CtlReq>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2221      	movs	r2, #33	; 0x21
 800770e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2207      	movs	r2, #7
 8007726:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2207      	movs	r2, #7
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa62 	bl	8008bf8 <USBH_CtlReq>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af02      	add	r7, sp, #8
 8007744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007750:	2300      	movs	r3, #0
 8007752:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800775a:	2b01      	cmp	r3, #1
 800775c:	d002      	beq.n	8007764 <CDC_ProcessTransmission+0x26>
 800775e:	2b02      	cmp	r3, #2
 8007760:	d023      	beq.n	80077aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007762:	e05e      	b.n	8007822 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	8b12      	ldrh	r2, [r2, #24]
 800776c:	4293      	cmp	r3, r2
 800776e:	d90b      	bls.n	8007788 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	69d9      	ldr	r1, [r3, #28]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8b1a      	ldrh	r2, [r3, #24]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	7b5b      	ldrb	r3, [r3, #13]
 800777c:	2001      	movs	r0, #1
 800777e:	9000      	str	r0, [sp, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fc48 	bl	8009016 <USBH_BulkSendData>
 8007786:	e00b      	b.n	80077a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	7b5b      	ldrb	r3, [r3, #13]
 8007796:	2001      	movs	r0, #1
 8007798:	9000      	str	r0, [sp, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 fc3b 	bl	8009016 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077a8:	e03b      	b.n	8007822 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	7b5b      	ldrb	r3, [r3, #13]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 ff5f 	bl	8009674 <USBH_LL_GetURBState>
 80077b6:	4603      	mov	r3, r0
 80077b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80077ba:	7afb      	ldrb	r3, [r7, #11]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d128      	bne.n	8007812 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	8b12      	ldrh	r2, [r2, #24]
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d90e      	bls.n	80077ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	8b12      	ldrh	r2, [r2, #24]
 80077d4:	1a9a      	subs	r2, r3, r2
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	8b12      	ldrh	r2, [r2, #24]
 80077e2:	441a      	add	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	61da      	str	r2, [r3, #28]
 80077e8:	e002      	b.n	80077f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007800:	e00e      	b.n	8007820 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f868 	bl	80078e0 <USBH_CDC_TransmitCallback>
      break;
 8007810:	e006      	b.n	8007820 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d103      	bne.n	8007820 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007820:	bf00      	nop
  }
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800783c:	2300      	movs	r3, #0
 800783e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007846:	2b03      	cmp	r3, #3
 8007848:	d002      	beq.n	8007850 <CDC_ProcessReception+0x26>
 800784a:	2b04      	cmp	r3, #4
 800784c:	d00e      	beq.n	800786c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800784e:	e043      	b.n	80078d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	6a19      	ldr	r1, [r3, #32]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	8b5a      	ldrh	r2, [r3, #26]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	7b1b      	ldrb	r3, [r3, #12]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fbff 	bl	8009060 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2204      	movs	r2, #4
 8007866:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800786a:	e035      	b.n	80078d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	7b1b      	ldrb	r3, [r3, #12]
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fefe 	bl	8009674 <USBH_LL_GetURBState>
 8007878:	4603      	mov	r3, r0
 800787a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800787c:	7cfb      	ldrb	r3, [r7, #19]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d129      	bne.n	80078d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	7b1b      	ldrb	r3, [r3, #12]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 fe61 	bl	8009550 <USBH_LL_GetLastXferSize>
 800788e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d016      	beq.n	80078c8 <CDC_ProcessReception+0x9e>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	8b5b      	ldrh	r3, [r3, #26]
 800789e:	461a      	mov	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d910      	bls.n	80078c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad2      	subs	r2, r2, r3
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	6a1a      	ldr	r2, [r3, #32]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	441a      	add	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2203      	movs	r2, #3
 80078c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078c6:	e006      	b.n	80078d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f80f 	bl	80078f4 <USBH_CDC_ReceiveCallback>
      break;
 80078d6:	bf00      	nop
  }
}
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007930:	2302      	movs	r3, #2
 8007932:	e029      	b.n	8007988 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	79fa      	ldrb	r2, [r7, #7]
 8007938:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f81f 	bl	8007990 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f001 fd31 	bl	80093e8 <USBH_LL_Init>

  return USBH_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e009      	b.n	80079b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	33e0      	adds	r3, #224	; 0xe0
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	2200      	movs	r2, #0
 80079ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b0f      	cmp	r3, #15
 80079ba:	d9f2      	bls.n	80079a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e009      	b.n	80079d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079dc:	d3f1      	bcc.n	80079c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2240      	movs	r2, #64	; 0x40
 8007a02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d016      	beq.n	8007a7a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10e      	bne.n	8007a74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a5c:	1c59      	adds	r1, r3, #1
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	33de      	adds	r3, #222	; 0xde
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	e004      	b.n	8007a7e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d204      	bcs.n	8007ab2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ab0:	e001      	b.n	8007ab6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	70fb      	strb	r3, [r7, #3]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70bb      	strb	r3, [r7, #2]
 8007ada:	4613      	mov	r3, r2
 8007adc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007aec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007aee:	e025      	b.n	8007b3c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	221a      	movs	r2, #26
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	3308      	adds	r3, #8
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	3302      	adds	r3, #2
 8007b00:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d002      	beq.n	8007b12 <USBH_FindInterface+0x4e>
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	2bff      	cmp	r3, #255	; 0xff
 8007b10:	d111      	bne.n	8007b36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b16:	78ba      	ldrb	r2, [r7, #2]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d002      	beq.n	8007b22 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b1c:	78bb      	ldrb	r3, [r7, #2]
 8007b1e:	2bff      	cmp	r3, #255	; 0xff
 8007b20:	d109      	bne.n	8007b36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b26:	787a      	ldrb	r2, [r7, #1]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d002      	beq.n	8007b32 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b2c:	787b      	ldrb	r3, [r7, #1]
 8007b2e:	2bff      	cmp	r3, #255	; 0xff
 8007b30:	d101      	bne.n	8007b36 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	e006      	b.n	8007b44 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d9d6      	bls.n	8007af0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b42:	23ff      	movs	r3, #255	; 0xff
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 fc81 	bl	8009460 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b5e:	2101      	movs	r1, #1
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 fd9a 	bl	800969a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af04      	add	r7, sp, #16
 8007b76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d102      	bne.n	8007b92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b0b      	cmp	r3, #11
 8007b9a:	f200 81be 	bhi.w	8007f1a <USBH_Process+0x3aa>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBH_Process+0x34>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bd5 	.word	0x08007bd5
 8007ba8:	08007c07 	.word	0x08007c07
 8007bac:	08007c6f 	.word	0x08007c6f
 8007bb0:	08007eb5 	.word	0x08007eb5
 8007bb4:	08007f1b 	.word	0x08007f1b
 8007bb8:	08007d13 	.word	0x08007d13
 8007bbc:	08007e5b 	.word	0x08007e5b
 8007bc0:	08007d49 	.word	0x08007d49
 8007bc4:	08007d69 	.word	0x08007d69
 8007bc8:	08007d89 	.word	0x08007d89
 8007bcc:	08007dcd 	.word	0x08007dcd
 8007bd0:	08007e9d 	.word	0x08007e9d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 819e 	beq.w	8007f1e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007be8:	20c8      	movs	r0, #200	; 0xc8
 8007bea:	f001 fd9d 	bl	8009728 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fc93 	bl	800951a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c04:	e18b      	b.n	8007f1e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d107      	bne.n	8007c20 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c1e:	e18d      	b.n	8007f3c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c2a:	d914      	bls.n	8007c56 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d903      	bls.n	8007c4e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	220d      	movs	r2, #13
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e176      	b.n	8007f3c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
      break;
 8007c54:	e172      	b.n	8007f3c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c5c:	f103 020a 	add.w	r2, r3, #10
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c66:	200a      	movs	r0, #10
 8007c68:	f001 fd5e 	bl	8009728 <USBH_Delay>
      break;
 8007c6c:	e166      	b.n	8007f3c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c7e:	2104      	movs	r1, #4
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c84:	2064      	movs	r0, #100	; 0x64
 8007c86:	f001 fd4f 	bl	8009728 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fc1e 	bl	80094cc <USBH_LL_GetSpeed>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2205      	movs	r2, #5
 8007c9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 fa29 	bl	80090fa <USBH_AllocPipe>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007cb0:	2180      	movs	r1, #128	; 0x80
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fa21 	bl	80090fa <USBH_AllocPipe>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7919      	ldrb	r1, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cd4:	b292      	uxth	r2, r2
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	9201      	str	r2, [sp, #4]
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f9da 	bl	800909c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	7959      	ldrb	r1, [r3, #5]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007cfc:	b292      	uxth	r2, r2
 8007cfe:	9202      	str	r2, [sp, #8]
 8007d00:	2200      	movs	r2, #0
 8007d02:	9201      	str	r2, [sp, #4]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4603      	mov	r3, r0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f9c6 	bl	800909c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d10:	e114      	b.n	8007f3c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f918 	bl	8007f48 <USBH_HandleEnum>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 80fe 	bne.w	8007f22 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d103      	bne.n	8007d40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d3e:	e0f0      	b.n	8007f22 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2207      	movs	r2, #7
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e0ec      	b.n	8007f22 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80e9 	beq.w	8007f26 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2208      	movs	r2, #8
 8007d64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d66:	e0de      	b.n	8007f26 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fc2c 	bl	80085d0 <USBH_SetCfg>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 80d5 	bne.w	8007f2a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2209      	movs	r2, #9
 8007d84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d86:	e0d0      	b.n	8007f2a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d96:	2101      	movs	r1, #1
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fc3c 	bl	8008616 <USBH_SetFeature>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	220a      	movs	r2, #10
 8007dae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007db0:	e0bd      	b.n	8007f2e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	f040 80b9 	bne.w	8007f2e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	701a      	strb	r2, [r3, #0]
      break;
 8007dc2:	e0b4      	b.n	8007f2e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220a      	movs	r2, #10
 8007dc8:	701a      	strb	r2, [r3, #0]
      break;
 8007dca:	e0b0      	b.n	8007f2e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80ad 	beq.w	8007f32 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	e016      	b.n	8007e14 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007de6:	7bfa      	ldrb	r2, [r7, #15]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32de      	adds	r2, #222	; 0xde
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	791a      	ldrb	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d108      	bne.n	8007e0e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007dfc:	7bfa      	ldrb	r2, [r7, #15]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	32de      	adds	r2, #222	; 0xde
 8007e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e0c:	e005      	b.n	8007e1a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	3301      	adds	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0e5      	beq.n	8007de6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d016      	beq.n	8007e52 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	4798      	blx	r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2206      	movs	r2, #6
 8007e3a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e42:	2103      	movs	r1, #3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e48:	e073      	b.n	8007f32 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220d      	movs	r2, #13
 8007e4e:	701a      	strb	r2, [r3, #0]
      break;
 8007e50:	e06f      	b.n	8007f32 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	220d      	movs	r2, #13
 8007e56:	701a      	strb	r2, [r3, #0]
      break;
 8007e58:	e06b      	b.n	8007f32 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d017      	beq.n	8007e94 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	220b      	movs	r2, #11
 8007e80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e82:	e058      	b.n	8007f36 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d154      	bne.n	8007f36 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	220d      	movs	r2, #13
 8007e90:	701a      	strb	r2, [r3, #0]
      break;
 8007e92:	e050      	b.n	8007f36 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	220d      	movs	r2, #13
 8007e98:	701a      	strb	r2, [r3, #0]
      break;
 8007e9a:	e04c      	b.n	8007f36 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d049      	beq.n	8007f3a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
      }
      break;
 8007eb2:	e042      	b.n	8007f3a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fd67 	bl	8007990 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef0:	2105      	movs	r1, #5
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d107      	bne.n	8007f12 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fe20 	bl	8007b50 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f10:	e014      	b.n	8007f3c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 faa4 	bl	8009460 <USBH_LL_Start>
      break;
 8007f18:	e010      	b.n	8007f3c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e00e      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e00c      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f22:	bf00      	nop
 8007f24:	e00a      	b.n	8007f3c <USBH_Process+0x3cc>
    break;
 8007f26:	bf00      	nop
 8007f28:	e008      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e006      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <USBH_Process+0x3cc>
      break;
 8007f3a:	bf00      	nop
  }
  return USBH_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop

08007f48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af04      	add	r7, sp, #16
 8007f4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b07      	cmp	r3, #7
 8007f5e:	f200 81c1 	bhi.w	80082e4 <USBH_HandleEnum+0x39c>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <USBH_HandleEnum+0x20>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f89 	.word	0x08007f89
 8007f6c:	08008047 	.word	0x08008047
 8007f70:	080080b1 	.word	0x080080b1
 8007f74:	0800813f 	.word	0x0800813f
 8007f78:	080081a9 	.word	0x080081a9
 8007f7c:	08008219 	.word	0x08008219
 8007f80:	0800825f 	.word	0x0800825f
 8007f84:	080082a5 	.word	0x080082a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f88:	2108      	movs	r1, #8
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa50 	bl	8008430 <USBH_Get_DevDesc>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d130      	bne.n	8007ffc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7919      	ldrb	r1, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fbe:	b292      	uxth	r2, r2
 8007fc0:	9202      	str	r2, [sp, #8]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	9201      	str	r2, [sp, #4]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2280      	movs	r2, #128	; 0x80
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f865 	bl	800909c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7959      	ldrb	r1, [r3, #5]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fe6:	b292      	uxth	r2, r2
 8007fe8:	9202      	str	r2, [sp, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	9201      	str	r2, [sp, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 f851 	bl	800909c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ffa:	e175      	b.n	80082e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	f040 8172 	bne.w	80082e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800800a:	3301      	adds	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800801a:	2b03      	cmp	r3, #3
 800801c:	d903      	bls.n	8008026 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	220d      	movs	r2, #13
 8008022:	701a      	strb	r2, [r3, #0]
      break;
 8008024:	e160      	b.n	80082e8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	795b      	ldrb	r3, [r3, #5]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f885 	bl	800913c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f87f 	bl	800913c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
      break;
 8008044:	e150      	b.n	80082e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008046:	2112      	movs	r1, #18
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f9f1 	bl	8008430 <USBH_Get_DevDesc>
 800804e:	4603      	mov	r3, r0
 8008050:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800805e:	e145      	b.n	80082ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b03      	cmp	r3, #3
 8008064:	f040 8142 	bne.w	80082ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800806e:	3301      	adds	r3, #1
 8008070:	b2da      	uxtb	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800807e:	2b03      	cmp	r3, #3
 8008080:	d903      	bls.n	800808a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220d      	movs	r2, #13
 8008086:	701a      	strb	r2, [r3, #0]
      break;
 8008088:	e130      	b.n	80082ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	795b      	ldrb	r3, [r3, #5]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f853 	bl	800913c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	791b      	ldrb	r3, [r3, #4]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f84d 	bl	800913c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
      break;
 80080ae:	e11d      	b.n	80082ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80080b0:	2101      	movs	r1, #1
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa68 	bl	8008588 <USBH_SetAddress>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d132      	bne.n	8008128 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80080c2:	2002      	movs	r0, #2
 80080c4:	f001 fb30 	bl	8009728 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2203      	movs	r2, #3
 80080d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7919      	ldrb	r1, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080ea:	b292      	uxth	r2, r2
 80080ec:	9202      	str	r2, [sp, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	9201      	str	r2, [sp, #4]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	4603      	mov	r3, r0
 80080f6:	2280      	movs	r2, #128	; 0x80
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 ffcf 	bl	800909c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7959      	ldrb	r1, [r3, #5]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008112:	b292      	uxth	r2, r2
 8008114:	9202      	str	r2, [sp, #8]
 8008116:	2200      	movs	r2, #0
 8008118:	9201      	str	r2, [sp, #4]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4603      	mov	r3, r0
 800811e:	2200      	movs	r2, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 ffbb 	bl	800909c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008126:	e0e3      	b.n	80082f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b03      	cmp	r3, #3
 800812c:	f040 80e0 	bne.w	80082f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	220d      	movs	r2, #13
 8008134:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	705a      	strb	r2, [r3, #1]
      break;
 800813c:	e0d8      	b.n	80082f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800813e:	2109      	movs	r1, #9
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f99d 	bl	8008480 <USBH_Get_CfgDesc>
 8008146:	4603      	mov	r3, r0
 8008148:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2204      	movs	r2, #4
 8008154:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008156:	e0cd      	b.n	80082f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b03      	cmp	r3, #3
 800815c:	f040 80ca 	bne.w	80082f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008166:	3301      	adds	r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008176:	2b03      	cmp	r3, #3
 8008178:	d903      	bls.n	8008182 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220d      	movs	r2, #13
 800817e:	701a      	strb	r2, [r3, #0]
      break;
 8008180:	e0b8      	b.n	80082f4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	795b      	ldrb	r3, [r3, #5]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 ffd7 	bl	800913c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 ffd1 	bl	800913c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
      break;
 80081a6:	e0a5      	b.n	80082f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f965 	bl	8008480 <USBH_Get_CfgDesc>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2205      	movs	r2, #5
 80081c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081c6:	e097      	b.n	80082f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	f040 8094 	bne.w	80082f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081d6:	3301      	adds	r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d903      	bls.n	80081f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	220d      	movs	r2, #13
 80081ee:	701a      	strb	r2, [r3, #0]
      break;
 80081f0:	e082      	b.n	80082f8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	795b      	ldrb	r3, [r3, #5]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 ff9f 	bl	800913c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 ff99 	bl	800913c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	e06f      	b.n	80082f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800821e:	2b00      	cmp	r3, #0
 8008220:	d019      	beq.n	8008256 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800822e:	23ff      	movs	r3, #255	; 0xff
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f949 	bl	80084c8 <USBH_Get_StringDesc>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2206      	movs	r2, #6
 8008244:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008246:	e059      	b.n	80082fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d156      	bne.n	80082fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2206      	movs	r2, #6
 8008252:	705a      	strb	r2, [r3, #1]
      break;
 8008254:	e052      	b.n	80082fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2206      	movs	r2, #6
 800825a:	705a      	strb	r2, [r3, #1]
      break;
 800825c:	e04e      	b.n	80082fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008264:	2b00      	cmp	r3, #0
 8008266:	d019      	beq.n	800829c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008274:	23ff      	movs	r3, #255	; 0xff
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f926 	bl	80084c8 <USBH_Get_StringDesc>
 800827c:	4603      	mov	r3, r0
 800827e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d103      	bne.n	800828e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2207      	movs	r2, #7
 800828a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800828c:	e038      	b.n	8008300 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d135      	bne.n	8008300 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2207      	movs	r2, #7
 8008298:	705a      	strb	r2, [r3, #1]
      break;
 800829a:	e031      	b.n	8008300 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2207      	movs	r2, #7
 80082a0:	705a      	strb	r2, [r3, #1]
      break;
 80082a2:	e02d      	b.n	8008300 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d017      	beq.n	80082de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082ba:	23ff      	movs	r3, #255	; 0xff
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f903 	bl	80084c8 <USBH_Get_StringDesc>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082d0:	e018      	b.n	8008304 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d115      	bne.n	8008304 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	e012      	b.n	8008304 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
      break;
 80082e2:	e00f      	b.n	8008304 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80082e4:	bf00      	nop
 80082e6:	e00e      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082e8:	bf00      	nop
 80082ea:	e00c      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082ec:	bf00      	nop
 80082ee:	e00a      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082f0:	bf00      	nop
 80082f2:	e008      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082f4:	bf00      	nop
 80082f6:	e006      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082f8:	bf00      	nop
 80082fa:	e004      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 80082fc:	bf00      	nop
 80082fe:	e002      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 8008300:	bf00      	nop
 8008302:	e000      	b.n	8008306 <USBH_HandleEnum+0x3be>
      break;
 8008304:	bf00      	nop
  }
  return Status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f804 	bl	8008352 <USBH_HandleSof>
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b0b      	cmp	r3, #11
 8008362:	d10a      	bne.n	800837a <USBH_HandleSof+0x28>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
  }
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008392:	bf00      	nop
}
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80083ae:	bf00      	nop
}
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f844 	bl	8009496 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	791b      	ldrb	r3, [r3, #4]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fe91 	bl	800913c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	795b      	ldrb	r3, [r3, #5]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fe8b 	bl	800913c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af02      	add	r7, sp, #8
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	b29b      	uxth	r3, r3
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800844e:	2100      	movs	r1, #0
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f864 	bl	800851e <USBH_GetDescriptor>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	b292      	uxth	r2, r2
 8008470:	4619      	mov	r1, r3
 8008472:	f000 f918 	bl	80086a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	331c      	adds	r3, #28
 8008490:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008492:	887b      	ldrh	r3, [r7, #2]
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849c:	2100      	movs	r1, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f83d 	bl	800851e <USBH_GetDescriptor>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d107      	bne.n	80084be <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f987 	bl	80087c8 <USBH_ParseCfgDesc>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	461a      	mov	r2, r3
 80084d4:	460b      	mov	r3, r1
 80084d6:	72fb      	strb	r3, [r7, #11]
 80084d8:	4613      	mov	r3, r2
 80084da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80084e4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084ec:	893b      	ldrh	r3, [r7, #8]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	460b      	mov	r3, r1
 80084f2:	2100      	movs	r1, #0
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f812 	bl	800851e <USBH_GetDescriptor>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d107      	bne.n	8008514 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800850a:	893a      	ldrh	r2, [r7, #8]
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fb24 	bl	8008b5c <USBH_ParseStringDesc>
  }

  return status;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	72fb      	strb	r3, [r7, #11]
 800852c:	4613      	mov	r3, r2
 800852e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	789b      	ldrb	r3, [r3, #2]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11c      	bne.n	8008572 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800853e:	b2da      	uxtb	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2206      	movs	r2, #6
 8008548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	893a      	ldrh	r2, [r7, #8]
 800854e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008550:	893b      	ldrh	r3, [r7, #8]
 8008552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855a:	d104      	bne.n	8008566 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f240 4209 	movw	r2, #1033	; 0x409
 8008562:	829a      	strh	r2, [r3, #20]
 8008564:	e002      	b.n	800856c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8b3a      	ldrh	r2, [r7, #24]
 8008570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008572:	8b3b      	ldrh	r3, [r7, #24]
 8008574:	461a      	mov	r2, r3
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fb3d 	bl	8008bf8 <USBH_CtlReq>
 800857e:	4603      	mov	r3, r0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	789b      	ldrb	r3, [r3, #2]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d10f      	bne.n	80085bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2205      	movs	r2, #5
 80085a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fb19 	bl	8008bf8 <USBH_CtlReq>
 80085c6:	4603      	mov	r3, r0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	789b      	ldrb	r3, [r3, #2]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d10e      	bne.n	8008602 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2209      	movs	r2, #9
 80085ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	887a      	ldrh	r2, [r7, #2]
 80085f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 faf6 	bl	8008bf8 <USBH_CtlReq>
 800860c:	4603      	mov	r3, r0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	789b      	ldrb	r3, [r3, #2]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d10f      	bne.n	800864a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2203      	movs	r2, #3
 8008634:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fad2 	bl	8008bf8 <USBH_CtlReq>
 8008654:	4603      	mov	r3, r0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	789b      	ldrb	r3, [r3, #2]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d10f      	bne.n	8008692 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 faae 	bl	8008bf8 <USBH_CtlReq>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	781a      	ldrb	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	785a      	ldrb	r2, [r3, #1]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3302      	adds	r3, #2
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3303      	adds	r3, #3
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b29a      	uxth	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	791a      	ldrb	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	795a      	ldrb	r2, [r3, #5]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	799a      	ldrb	r2, [r3, #6]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	79da      	ldrb	r2, [r3, #7]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	79db      	ldrb	r3, [r3, #7]
 8008704:	2b20      	cmp	r3, #32
 8008706:	dc11      	bgt.n	800872c <USBH_ParseDevDesc+0x86>
 8008708:	2b08      	cmp	r3, #8
 800870a:	db16      	blt.n	800873a <USBH_ParseDevDesc+0x94>
 800870c:	3b08      	subs	r3, #8
 800870e:	2201      	movs	r2, #1
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf14      	ite	ne
 8008720:	2301      	movne	r3, #1
 8008722:	2300      	moveq	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <USBH_ParseDevDesc+0x8a>
 800872a:	e006      	b.n	800873a <USBH_ParseDevDesc+0x94>
 800872c:	2b40      	cmp	r3, #64	; 0x40
 800872e:	d104      	bne.n	800873a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	79da      	ldrb	r2, [r3, #7]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	71da      	strb	r2, [r3, #7]
      break;
 8008738:	e003      	b.n	8008742 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2240      	movs	r2, #64	; 0x40
 800873e:	71da      	strb	r2, [r3, #7]
      break;
 8008740:	bf00      	nop
  }

  if (length > 8U)
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	2b08      	cmp	r3, #8
 8008746:	d939      	bls.n	80087bc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3308      	adds	r3, #8
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b29a      	uxth	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3309      	adds	r3, #9
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b29b      	uxth	r3, r3
 800875c:	4313      	orrs	r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	330a      	adds	r3, #10
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	b29a      	uxth	r2, r3
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	330b      	adds	r3, #11
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	b29b      	uxth	r3, r3
 8008778:	4313      	orrs	r3, r2
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	330c      	adds	r3, #12
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b29a      	uxth	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	330d      	adds	r3, #13
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b29b      	uxth	r3, r3
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	b29b      	uxth	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	7b9a      	ldrb	r2, [r3, #14]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	7bda      	ldrb	r2, [r3, #15]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	7c1a      	ldrb	r2, [r3, #16]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	7c5a      	ldrb	r2, [r3, #17]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	745a      	strb	r2, [r3, #17]
  }
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08c      	sub	sp, #48	; 0x30
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	785a      	ldrb	r2, [r3, #1]
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	3302      	adds	r3, #2
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	b29a      	uxth	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3303      	adds	r3, #3
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	b29b      	uxth	r3, r3
 800881c:	4313      	orrs	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008824:	bf28      	it	cs
 8008826:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800882a:	b29a      	uxth	r2, r3
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	791a      	ldrb	r2, [r3, #4]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	795a      	ldrb	r2, [r3, #5]
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	799a      	ldrb	r2, [r3, #6]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	79da      	ldrb	r2, [r3, #7]
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7a1a      	ldrb	r2, [r3, #8]
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b09      	cmp	r3, #9
 800885e:	d002      	beq.n	8008866 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	2209      	movs	r2, #9
 8008864:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008866:	88fb      	ldrh	r3, [r7, #6]
 8008868:	2b09      	cmp	r3, #9
 800886a:	f240 809d 	bls.w	80089a8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800886e:	2309      	movs	r3, #9
 8008870:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008876:	e081      	b.n	800897c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008878:	f107 0316 	add.w	r3, r7, #22
 800887c:	4619      	mov	r1, r3
 800887e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008880:	f000 f99f 	bl	8008bc2 <USBH_GetNextDesc>
 8008884:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b04      	cmp	r3, #4
 800888c:	d176      	bne.n	800897c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b09      	cmp	r3, #9
 8008894:	d002      	beq.n	800889c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	2209      	movs	r2, #9
 800889a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800889c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a0:	221a      	movs	r2, #26
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
 80088a6:	3308      	adds	r3, #8
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	4413      	add	r3, r2
 80088ac:	3302      	adds	r3, #2
 80088ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80088b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b2:	69f8      	ldr	r0, [r7, #28]
 80088b4:	f000 f87e 	bl	80089b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088c2:	e043      	b.n	800894c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088c4:	f107 0316 	add.w	r3, r7, #22
 80088c8:	4619      	mov	r1, r3
 80088ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088cc:	f000 f979 	bl	8008bc2 <USBH_GetNextDesc>
 80088d0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b05      	cmp	r3, #5
 80088d8:	d138      	bne.n	800894c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	795b      	ldrb	r3, [r3, #5]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d10f      	bne.n	8008902 <USBH_ParseCfgDesc+0x13a>
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	799b      	ldrb	r3, [r3, #6]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d10b      	bne.n	8008902 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	79db      	ldrb	r3, [r3, #7]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10f      	bne.n	8008912 <USBH_ParseCfgDesc+0x14a>
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d00b      	beq.n	8008912 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	2209      	movs	r2, #9
 80088fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008900:	e007      	b.n	8008912 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b07      	cmp	r3, #7
 8008908:	d004      	beq.n	8008914 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	2207      	movs	r2, #7
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	e000      	b.n	8008914 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008912:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008918:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800891c:	3201      	adds	r2, #1
 800891e:	00d2      	lsls	r2, r2, #3
 8008920:	211a      	movs	r1, #26
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	3308      	adds	r3, #8
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	4413      	add	r3, r2
 800892e:	3304      	adds	r3, #4
 8008930:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f86b 	bl	8008a12 <USBH_ParseEPDesc>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008946:	3301      	adds	r3, #1
 8008948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	791b      	ldrb	r3, [r3, #4]
 8008950:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008954:	429a      	cmp	r2, r3
 8008956:	d204      	bcs.n	8008962 <USBH_ParseCfgDesc+0x19a>
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	885a      	ldrh	r2, [r3, #2]
 800895c:	8afb      	ldrh	r3, [r7, #22]
 800895e:	429a      	cmp	r2, r3
 8008960:	d8b0      	bhi.n	80088c4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800896a:	429a      	cmp	r2, r3
 800896c:	d201      	bcs.n	8008972 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800896e:	2303      	movs	r3, #3
 8008970:	e01c      	b.n	80089ac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008976:	3301      	adds	r3, #1
 8008978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800897c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008980:	2b01      	cmp	r3, #1
 8008982:	d805      	bhi.n	8008990 <USBH_ParseCfgDesc+0x1c8>
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	885a      	ldrh	r2, [r3, #2]
 8008988:	8afb      	ldrh	r3, [r7, #22]
 800898a:	429a      	cmp	r2, r3
 800898c:	f63f af74 	bhi.w	8008878 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	791b      	ldrb	r3, [r3, #4]
 8008994:	2b02      	cmp	r3, #2
 8008996:	bf28      	it	cs
 8008998:	2302      	movcs	r3, #2
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d201      	bcs.n	80089a8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e001      	b.n	80089ac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80089a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3730      	adds	r7, #48	; 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781a      	ldrb	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	785a      	ldrb	r2, [r3, #1]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	789a      	ldrb	r2, [r3, #2]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	78da      	ldrb	r2, [r3, #3]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	791a      	ldrb	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	795a      	ldrb	r2, [r3, #5]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	799a      	ldrb	r2, [r3, #6]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	79da      	ldrb	r2, [r3, #7]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	7a1a      	ldrb	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	721a      	strb	r2, [r3, #8]
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	785a      	ldrb	r2, [r3, #1]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	789a      	ldrb	r2, [r3, #2]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	78da      	ldrb	r2, [r3, #3]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3304      	adds	r3, #4
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3305      	adds	r3, #5
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	799a      	ldrb	r2, [r3, #6]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	75fb      	strb	r3, [r7, #23]
 8008a72:	e033      	b.n	8008adc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	889b      	ldrh	r3, [r3, #4]
 8008a78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	b21a      	sxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b299      	uxth	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3305      	adds	r3, #5
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d110      	bne.n	8008ace <USBH_ParseEPDesc+0xbc>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b299      	uxth	r1, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3305      	adds	r3, #5
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	b21b      	sxth	r3, r3
 8008ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aca:	b21b      	sxth	r3, r3
 8008acc:	e001      	b.n	8008ad2 <USBH_ParseEPDesc+0xc0>
 8008ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b21b      	sxth	r3, r3
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d116      	bne.n	8008b14 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	78db      	ldrb	r3, [r3, #3]
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d005      	beq.n	8008afe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	78db      	ldrb	r3, [r3, #3]
 8008af6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d127      	bne.n	8008b4e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	799b      	ldrb	r3, [r3, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <USBH_ParseEPDesc+0xfc>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	799b      	ldrb	r3, [r3, #6]
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d91f      	bls.n	8008b4e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	75fb      	strb	r3, [r7, #23]
 8008b12:	e01c      	b.n	8008b4e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10a      	bne.n	8008b36 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	799b      	ldrb	r3, [r3, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <USBH_ParseEPDesc+0x11e>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	799b      	ldrb	r3, [r3, #6]
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d90e      	bls.n	8008b4e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b30:	2303      	movs	r3, #3
 8008b32:	75fb      	strb	r3, [r7, #23]
 8008b34:	e00b      	b.n	8008b4e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	78db      	ldrb	r3, [r3, #3]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d105      	bne.n	8008b4e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	799b      	ldrb	r3, [r3, #6]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d120      	bne.n	8008bb6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	1e9a      	subs	r2, r3, #2
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	bf28      	it	cs
 8008b80:	4613      	movcs	r3, r2
 8008b82:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3302      	adds	r3, #2
 8008b88:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	82fb      	strh	r3, [r7, #22]
 8008b8e:	e00b      	b.n	8008ba8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b90:	8afb      	ldrh	r3, [r7, #22]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ba2:	8afb      	ldrh	r3, [r7, #22]
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	82fb      	strh	r3, [r7, #22]
 8008ba8:	8afa      	ldrh	r2, [r7, #22]
 8008baa:	8abb      	ldrh	r3, [r7, #20]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d3ef      	bcc.n	8008b90 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	881a      	ldrh	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4413      	add	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c06:	2301      	movs	r3, #1
 8008c08:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	789b      	ldrb	r3, [r3, #2]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d002      	beq.n	8008c18 <USBH_CtlReq+0x20>
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d00f      	beq.n	8008c36 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c16:	e027      	b.n	8008c68 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	88fa      	ldrh	r2, [r7, #6]
 8008c22:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c30:	2301      	movs	r3, #1
 8008c32:	75fb      	strb	r3, [r7, #23]
      break;
 8008c34:	e018      	b.n	8008c68 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f81c 	bl	8008c74 <USBH_HandleControl>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <USBH_CtlReq+0x54>
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d106      	bne.n	8008c5a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	761a      	strb	r2, [r3, #24]
      break;
 8008c58:	e005      	b.n	8008c66 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d102      	bne.n	8008c66 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	709a      	strb	r2, [r3, #2]
      break;
 8008c66:	bf00      	nop
  }
  return status;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	7e1b      	ldrb	r3, [r3, #24]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	2b0a      	cmp	r3, #10
 8008c8c:	f200 8156 	bhi.w	8008f3c <USBH_HandleControl+0x2c8>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <USBH_HandleControl+0x24>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008cc5 	.word	0x08008cc5
 8008c9c:	08008cdf 	.word	0x08008cdf
 8008ca0:	08008d49 	.word	0x08008d49
 8008ca4:	08008d6f 	.word	0x08008d6f
 8008ca8:	08008da7 	.word	0x08008da7
 8008cac:	08008dd1 	.word	0x08008dd1
 8008cb0:	08008e23 	.word	0x08008e23
 8008cb4:	08008e45 	.word	0x08008e45
 8008cb8:	08008e81 	.word	0x08008e81
 8008cbc:	08008ea7 	.word	0x08008ea7
 8008cc0:	08008ee5 	.word	0x08008ee5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f103 0110 	add.w	r1, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	795b      	ldrb	r3, [r3, #5]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f943 	bl	8008f5c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	761a      	strb	r2, [r3, #24]
      break;
 8008cdc:	e139      	b.n	8008f52 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	795b      	ldrb	r3, [r3, #5]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fcc5 	bl	8009674 <USBH_LL_GetURBState>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d11e      	bne.n	8008d32 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7c1b      	ldrb	r3, [r3, #16]
 8008cf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cfc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8adb      	ldrh	r3, [r3, #22]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d06:	7b7b      	ldrb	r3, [r7, #13]
 8008d08:	2b80      	cmp	r3, #128	; 0x80
 8008d0a:	d103      	bne.n	8008d14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d12:	e115      	b.n	8008f40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2205      	movs	r2, #5
 8008d18:	761a      	strb	r2, [r3, #24]
      break;
 8008d1a:	e111      	b.n	8008f40 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d1c:	7b7b      	ldrb	r3, [r7, #13]
 8008d1e:	2b80      	cmp	r3, #128	; 0x80
 8008d20:	d103      	bne.n	8008d2a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2209      	movs	r2, #9
 8008d26:	761a      	strb	r2, [r3, #24]
      break;
 8008d28:	e10a      	b.n	8008f40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	761a      	strb	r2, [r3, #24]
      break;
 8008d30:	e106      	b.n	8008f40 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d003      	beq.n	8008d40 <USBH_HandleControl+0xcc>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	f040 8100 	bne.w	8008f40 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	220b      	movs	r2, #11
 8008d44:	761a      	strb	r2, [r3, #24]
      break;
 8008d46:	e0fb      	b.n	8008f40 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6899      	ldr	r1, [r3, #8]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	899a      	ldrh	r2, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	791b      	ldrb	r3, [r3, #4]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f93a 	bl	8008fda <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	761a      	strb	r2, [r3, #24]
      break;
 8008d6c:	e0f1      	b.n	8008f52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	791b      	ldrb	r3, [r3, #4]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc7d 	bl	8009674 <USBH_LL_GetURBState>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d102      	bne.n	8008d8a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2209      	movs	r2, #9
 8008d88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b05      	cmp	r3, #5
 8008d8e:	d102      	bne.n	8008d96 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d94:	e0d6      	b.n	8008f44 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	f040 80d3 	bne.w	8008f44 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	220b      	movs	r2, #11
 8008da2:	761a      	strb	r2, [r3, #24]
      break;
 8008da4:	e0ce      	b.n	8008f44 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6899      	ldr	r1, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	899a      	ldrh	r2, [r3, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	795b      	ldrb	r3, [r3, #5]
 8008db2:	2001      	movs	r0, #1
 8008db4:	9000      	str	r0, [sp, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8ea 	bl	8008f90 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2206      	movs	r2, #6
 8008dcc:	761a      	strb	r2, [r3, #24]
      break;
 8008dce:	e0c0      	b.n	8008f52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	795b      	ldrb	r3, [r3, #5]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fc4c 	bl	8009674 <USBH_LL_GetURBState>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d103      	bne.n	8008dee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2207      	movs	r2, #7
 8008dea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dec:	e0ac      	b.n	8008f48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	d105      	bne.n	8008e00 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	220c      	movs	r2, #12
 8008df8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dfe:	e0a3      	b.n	8008f48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d103      	bne.n	8008e0e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2205      	movs	r2, #5
 8008e0a:	761a      	strb	r2, [r3, #24]
      break;
 8008e0c:	e09c      	b.n	8008f48 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	f040 8099 	bne.w	8008f48 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	220b      	movs	r2, #11
 8008e1a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e20:	e092      	b.n	8008f48 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	791b      	ldrb	r3, [r3, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	2100      	movs	r1, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8d5 	bl	8008fda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2208      	movs	r2, #8
 8008e40:	761a      	strb	r2, [r3, #24]

      break;
 8008e42:	e086      	b.n	8008f52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fc12 	bl	8009674 <USBH_LL_GetURBState>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d105      	bne.n	8008e66 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	220d      	movs	r2, #13
 8008e5e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e64:	e072      	b.n	8008f4c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d103      	bne.n	8008e74 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	220b      	movs	r2, #11
 8008e70:	761a      	strb	r2, [r3, #24]
      break;
 8008e72:	e06b      	b.n	8008f4c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d168      	bne.n	8008f4c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7e:	e065      	b.n	8008f4c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	795b      	ldrb	r3, [r3, #5]
 8008e84:	2201      	movs	r2, #1
 8008e86:	9200      	str	r2, [sp, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f87f 	bl	8008f90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	220a      	movs	r2, #10
 8008ea2:	761a      	strb	r2, [r3, #24]
      break;
 8008ea4:	e055      	b.n	8008f52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	795b      	ldrb	r3, [r3, #5]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fbe1 	bl	8009674 <USBH_LL_GetURBState>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d105      	bne.n	8008ec8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	220d      	movs	r2, #13
 8008ec4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ec6:	e043      	b.n	8008f50 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d103      	bne.n	8008ed6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2209      	movs	r2, #9
 8008ed2:	761a      	strb	r2, [r3, #24]
      break;
 8008ed4:	e03c      	b.n	8008f50 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d139      	bne.n	8008f50 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	220b      	movs	r2, #11
 8008ee0:	761a      	strb	r2, [r3, #24]
      break;
 8008ee2:	e035      	b.n	8008f50 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	7e5b      	ldrb	r3, [r3, #25]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	765a      	strb	r2, [r3, #25]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7e5b      	ldrb	r3, [r3, #25]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d806      	bhi.n	8008f06 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f04:	e025      	b.n	8008f52 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f0c:	2106      	movs	r1, #6
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	795b      	ldrb	r3, [r3, #5]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f90c 	bl	800913c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	791b      	ldrb	r3, [r3, #4]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f906 	bl	800913c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f36:	2302      	movs	r3, #2
 8008f38:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3a:	e00a      	b.n	8008f52 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e008      	b.n	8008f52 <USBH_HandleControl+0x2de>
      break;
 8008f40:	bf00      	nop
 8008f42:	e006      	b.n	8008f52 <USBH_HandleControl+0x2de>
      break;
 8008f44:	bf00      	nop
 8008f46:	e004      	b.n	8008f52 <USBH_HandleControl+0x2de>
      break;
 8008f48:	bf00      	nop
 8008f4a:	e002      	b.n	8008f52 <USBH_HandleControl+0x2de>
      break;
 8008f4c:	bf00      	nop
 8008f4e:	e000      	b.n	8008f52 <USBH_HandleControl+0x2de>
      break;
 8008f50:	bf00      	nop
  }

  return status;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af04      	add	r7, sp, #16
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f6a:	79f9      	ldrb	r1, [r7, #7]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	2308      	movs	r3, #8
 8008f72:	9302      	str	r3, [sp, #8]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	9301      	str	r3, [sp, #4]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	2200      	movs	r2, #0
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fb46 	bl	8009612 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af04      	add	r7, sp, #16
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	80fb      	strh	r3, [r7, #6]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fb4:	7979      	ldrb	r1, [r7, #5]
 8008fb6:	7e3b      	ldrb	r3, [r7, #24]
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	9302      	str	r3, [sp, #8]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2200      	movs	r2, #0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fb21 	bl	8009612 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af04      	add	r7, sp, #16
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	460b      	mov	r3, r1
 8008fea:	80fb      	strh	r3, [r7, #6]
 8008fec:	4613      	mov	r3, r2
 8008fee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ff0:	7979      	ldrb	r1, [r7, #5]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9303      	str	r3, [sp, #12]
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	2301      	movs	r3, #1
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	2201      	movs	r2, #1
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fb03 	bl	8009612 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800900c:	2300      	movs	r3, #0

}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b088      	sub	sp, #32
 800901a:	af04      	add	r7, sp, #16
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4611      	mov	r1, r2
 8009022:	461a      	mov	r2, r3
 8009024:	460b      	mov	r3, r1
 8009026:	80fb      	strh	r3, [r7, #6]
 8009028:	4613      	mov	r3, r2
 800902a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800903a:	7979      	ldrb	r1, [r7, #5]
 800903c:	7e3b      	ldrb	r3, [r7, #24]
 800903e:	9303      	str	r3, [sp, #12]
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	9302      	str	r3, [sp, #8]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2301      	movs	r3, #1
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2302      	movs	r3, #2
 800904e:	2200      	movs	r2, #0
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fade 	bl	8009612 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af04      	add	r7, sp, #16
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4611      	mov	r1, r2
 800906c:	461a      	mov	r2, r3
 800906e:	460b      	mov	r3, r1
 8009070:	80fb      	strh	r3, [r7, #6]
 8009072:	4613      	mov	r3, r2
 8009074:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009076:	7979      	ldrb	r1, [r7, #5]
 8009078:	2300      	movs	r3, #0
 800907a:	9303      	str	r3, [sp, #12]
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	9302      	str	r3, [sp, #8]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	2301      	movs	r3, #1
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2302      	movs	r3, #2
 800908a:	2201      	movs	r2, #1
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 fac0 	bl	8009612 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af04      	add	r7, sp, #16
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	70fb      	strb	r3, [r7, #3]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70bb      	strb	r3, [r7, #2]
 80090b2:	4613      	mov	r3, r2
 80090b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090b6:	7878      	ldrb	r0, [r7, #1]
 80090b8:	78ba      	ldrb	r2, [r7, #2]
 80090ba:	78f9      	ldrb	r1, [r7, #3]
 80090bc:	8b3b      	ldrh	r3, [r7, #24]
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	7d3b      	ldrb	r3, [r7, #20]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	7c3b      	ldrb	r3, [r7, #16]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa53 	bl	8009576 <USBH_LL_OpenPipe>

  return USBH_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa72 	bl	80095d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f836 	bl	8009178 <USBH_GetFreePipe>
 800910c:	4603      	mov	r3, r0
 800910e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009110:	89fb      	ldrh	r3, [r7, #14]
 8009112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009116:	4293      	cmp	r3, r2
 8009118:	d00a      	beq.n	8009130 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	89fb      	ldrh	r3, [r7, #14]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	33e0      	adds	r3, #224	; 0xe0
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009130:	89fb      	ldrh	r3, [r7, #14]
 8009132:	b2db      	uxtb	r3, r3
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	2b0f      	cmp	r3, #15
 800914c:	d80d      	bhi.n	800916a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	33e0      	adds	r3, #224	; 0xe0
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	33e0      	adds	r3, #224	; 0xe0
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	e00f      	b.n	80091aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	33e0      	adds	r3, #224	; 0xe0
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	e007      	b.n	80091b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	3301      	adds	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b0f      	cmp	r3, #15
 80091ae:	d9ec      	bls.n	800918a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091c4:	2201      	movs	r2, #1
 80091c6:	490e      	ldr	r1, [pc, #56]	; (8009200 <MX_USB_HOST_Init+0x40>)
 80091c8:	480e      	ldr	r0, [pc, #56]	; (8009204 <MX_USB_HOST_Init+0x44>)
 80091ca:	f7fe fba7 	bl	800791c <USBH_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091d4:	f7f7 fd1c 	bl	8000c10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091d8:	490b      	ldr	r1, [pc, #44]	; (8009208 <MX_USB_HOST_Init+0x48>)
 80091da:	480a      	ldr	r0, [pc, #40]	; (8009204 <MX_USB_HOST_Init+0x44>)
 80091dc:	f7fe fc2c 	bl	8007a38 <USBH_RegisterClass>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091e6:	f7f7 fd13 	bl	8000c10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091ea:	4806      	ldr	r0, [pc, #24]	; (8009204 <MX_USB_HOST_Init+0x44>)
 80091ec:	f7fe fcb0 	bl	8007b50 <USBH_Start>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091f6:	f7f7 fd0b 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	08009221 	.word	0x08009221
 8009204:	20000234 	.word	0x20000234
 8009208:	20000014 	.word	0x20000014

0800920c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009210:	4802      	ldr	r0, [pc, #8]	; (800921c <MX_USB_HOST_Process+0x10>)
 8009212:	f7fe fcad 	bl	8007b70 <USBH_Process>
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000234 	.word	0x20000234

08009220 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	3b01      	subs	r3, #1
 8009230:	2b04      	cmp	r3, #4
 8009232:	d819      	bhi.n	8009268 <USBH_UserProcess+0x48>
 8009234:	a201      	add	r2, pc, #4	; (adr r2, 800923c <USBH_UserProcess+0x1c>)
 8009236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923a:	bf00      	nop
 800923c:	08009269 	.word	0x08009269
 8009240:	08009259 	.word	0x08009259
 8009244:	08009269 	.word	0x08009269
 8009248:	08009261 	.word	0x08009261
 800924c:	08009251 	.word	0x08009251
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <USBH_UserProcess+0x58>)
 8009252:	2203      	movs	r2, #3
 8009254:	701a      	strb	r2, [r3, #0]
  break;
 8009256:	e008      	b.n	800926a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <USBH_UserProcess+0x58>)
 800925a:	2202      	movs	r2, #2
 800925c:	701a      	strb	r2, [r3, #0]
  break;
 800925e:	e004      	b.n	800926a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <USBH_UserProcess+0x58>)
 8009262:	2201      	movs	r2, #1
 8009264:	701a      	strb	r2, [r3, #0]
  break;
 8009266:	e000      	b.n	800926a <USBH_UserProcess+0x4a>

  default:
  break;
 8009268:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	2000060c 	.word	0x2000060c

0800927c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	605a      	str	r2, [r3, #4]
 800928e:	609a      	str	r2, [r3, #8]
 8009290:	60da      	str	r2, [r3, #12]
 8009292:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800929c:	d147      	bne.n	800932e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	4b25      	ldr	r3, [pc, #148]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	4a24      	ldr	r2, [pc, #144]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6313      	str	r3, [r2, #48]	; 0x30
 80092ae:	4b22      	ldr	r3, [pc, #136]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 80092b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	4619      	mov	r1, r3
 80092ce:	481b      	ldr	r0, [pc, #108]	; (800933c <HAL_HCD_MspInit+0xc0>)
 80092d0:	f7f8 f9b2 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092da:	2302      	movs	r3, #2
 80092dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e2:	2300      	movs	r3, #0
 80092e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092e6:	230a      	movs	r3, #10
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ea:	f107 0314 	add.w	r3, r7, #20
 80092ee:	4619      	mov	r1, r3
 80092f0:	4812      	ldr	r0, [pc, #72]	; (800933c <HAL_HCD_MspInit+0xc0>)
 80092f2:	f7f8 f9a1 	bl	8001638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	6353      	str	r3, [r2, #52]	; 0x34
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 8009308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930a:	4a0b      	ldr	r2, [pc, #44]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 800930c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009310:	6453      	str	r3, [r2, #68]	; 0x44
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <HAL_HCD_MspInit+0xbc>)
 8009314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	2043      	movs	r0, #67	; 0x43
 8009324:	f7f8 f951 	bl	80015ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009328:	2043      	movs	r0, #67	; 0x43
 800932a:	f7f8 f96a 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800932e:	bf00      	nop
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40023800 	.word	0x40023800
 800933c:	40020000 	.word	0x40020000

08009340 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe ffed 	bl	800832e <USBH_LL_IncTimer>
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f825 	bl	80083ba <USBH_LL_Connect>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff f82e 	bl	80083e8 <USBH_LL_Disconnect>
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	4613      	mov	r3, r2
 80093a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe ffdf 	bl	8008382 <USBH_LL_PortEnabled>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe ffdf 	bl	800839e <USBH_LL_PortDisabled>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d12a      	bne.n	8009450 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093fa:	4a18      	ldr	r2, [pc, #96]	; (800945c <USBH_LL_Init+0x74>)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a15      	ldr	r2, [pc, #84]	; (800945c <USBH_LL_Init+0x74>)
 8009406:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800940a:	4b14      	ldr	r3, [pc, #80]	; (800945c <USBH_LL_Init+0x74>)
 800940c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009410:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009412:	4b12      	ldr	r3, [pc, #72]	; (800945c <USBH_LL_Init+0x74>)
 8009414:	2208      	movs	r2, #8
 8009416:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009418:	4b10      	ldr	r3, [pc, #64]	; (800945c <USBH_LL_Init+0x74>)
 800941a:	2201      	movs	r2, #1
 800941c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800941e:	4b0f      	ldr	r3, [pc, #60]	; (800945c <USBH_LL_Init+0x74>)
 8009420:	2200      	movs	r2, #0
 8009422:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <USBH_LL_Init+0x74>)
 8009426:	2202      	movs	r2, #2
 8009428:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <USBH_LL_Init+0x74>)
 800942c:	2200      	movs	r2, #0
 800942e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009430:	480a      	ldr	r0, [pc, #40]	; (800945c <USBH_LL_Init+0x74>)
 8009432:	f7f8 faf2 	bl	8001a1a <HAL_HCD_Init>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800943c:	f7f7 fbe8 	bl	8000c10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009440:	4806      	ldr	r0, [pc, #24]	; (800945c <USBH_LL_Init+0x74>)
 8009442:	f7f8 fed6 	bl	80021f2 <HAL_HCD_GetCurrentFrame>
 8009446:	4603      	mov	r3, r0
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fe ff60 	bl	8008310 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000610 	.word	0x20000610

08009460 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009476:	4618      	mov	r0, r3
 8009478:	f7f8 fe45 	bl	8002106 <HAL_HCD_Start>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f95c 	bl	8009740 <USBH_Get_USB_Status>
 8009488:	4603      	mov	r3, r0
 800948a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948c:	7bbb      	ldrb	r3, [r7, #14]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f8 fe4d 	bl	800214c <HAL_HCD_Stop>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f941 	bl	8009740 <USBH_Get_USB_Status>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094d4:	2301      	movs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f8 fe95 	bl	800220e <HAL_HCD_GetCurrentSpeed>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d00c      	beq.n	8009504 <USBH_LL_GetSpeed+0x38>
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d80d      	bhi.n	800950a <USBH_LL_GetSpeed+0x3e>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <USBH_LL_GetSpeed+0x2c>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d003      	beq.n	80094fe <USBH_LL_GetSpeed+0x32>
 80094f6:	e008      	b.n	800950a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
    break;
 80094fc:	e008      	b.n	8009510 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094fe:	2301      	movs	r3, #1
 8009500:	73fb      	strb	r3, [r7, #15]
    break;
 8009502:	e005      	b.n	8009510 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009504:	2302      	movs	r3, #2
 8009506:	73fb      	strb	r3, [r7, #15]
    break;
 8009508:	e002      	b.n	8009510 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800950a:	2301      	movs	r3, #1
 800950c:	73fb      	strb	r3, [r7, #15]
    break;
 800950e:	bf00      	nop
  }
  return  speed;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009530:	4618      	mov	r0, r3
 8009532:	f7f8 fe28 	bl	8002186 <HAL_HCD_ResetPort>
 8009536:	4603      	mov	r3, r0
 8009538:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 f8ff 	bl	8009740 <USBH_Get_USB_Status>
 8009542:	4603      	mov	r3, r0
 8009544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009546:	7bbb      	ldrb	r3, [r7, #14]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	4611      	mov	r1, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7f8 fe2f 	bl	80021ca <HAL_HCD_HC_GetXferCount>
 800956c:	4603      	mov	r3, r0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009576:	b590      	push	{r4, r7, lr}
 8009578:	b089      	sub	sp, #36	; 0x24
 800957a:	af04      	add	r7, sp, #16
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	461a      	mov	r2, r3
 8009584:	4603      	mov	r3, r0
 8009586:	70fb      	strb	r3, [r7, #3]
 8009588:	460b      	mov	r3, r1
 800958a:	70bb      	strb	r3, [r7, #2]
 800958c:	4613      	mov	r3, r2
 800958e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800959e:	787c      	ldrb	r4, [r7, #1]
 80095a0:	78ba      	ldrb	r2, [r7, #2]
 80095a2:	78f9      	ldrb	r1, [r7, #3]
 80095a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095a6:	9302      	str	r3, [sp, #8]
 80095a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4623      	mov	r3, r4
 80095b6:	f7f8 fa92 	bl	8001ade <HAL_HCD_HC_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f8bd 	bl	8009740 <USBH_Get_USB_Status>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd90      	pop	{r4, r7, pc}

080095d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f8 fb02 	bl	8001bfc <HAL_HCD_HC_Halt>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f89e 	bl	8009740 <USBH_Get_USB_Status>
 8009604:	4603      	mov	r3, r0
 8009606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009608:	7bbb      	ldrb	r3, [r7, #14]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009612:	b590      	push	{r4, r7, lr}
 8009614:	b089      	sub	sp, #36	; 0x24
 8009616:	af04      	add	r7, sp, #16
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	4608      	mov	r0, r1
 800961c:	4611      	mov	r1, r2
 800961e:	461a      	mov	r2, r3
 8009620:	4603      	mov	r3, r0
 8009622:	70fb      	strb	r3, [r7, #3]
 8009624:	460b      	mov	r3, r1
 8009626:	70bb      	strb	r3, [r7, #2]
 8009628:	4613      	mov	r3, r2
 800962a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800963a:	787c      	ldrb	r4, [r7, #1]
 800963c:	78ba      	ldrb	r2, [r7, #2]
 800963e:	78f9      	ldrb	r1, [r7, #3]
 8009640:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009648:	9302      	str	r3, [sp, #8]
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	4623      	mov	r3, r4
 8009656:	f7f8 faf5 	bl	8001c44 <HAL_HCD_HC_SubmitRequest>
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f86d 	bl	8009740 <USBH_Get_USB_Status>
 8009666:	4603      	mov	r3, r0
 8009668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966a:	7bbb      	ldrb	r3, [r7, #14]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bd90      	pop	{r4, r7, pc}

08009674 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7f8 fd89 	bl	80021a2 <HAL_HCD_HC_GetURBState>
 8009690:	4603      	mov	r3, r0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d103      	bne.n	80096b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f870 	bl	8009798 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096b8:	20c8      	movs	r0, #200	; 0xc8
 80096ba:	f7f7 fe87 	bl	80013cc <HAL_Delay>
  return USBH_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
 80096d4:	4613      	mov	r3, r2
 80096d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	212c      	movs	r1, #44	; 0x2c
 80096e6:	fb01 f303 	mul.w	r3, r1, r3
 80096ea:	4413      	add	r3, r2
 80096ec:	333b      	adds	r3, #59	; 0x3b
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	212c      	movs	r1, #44	; 0x2c
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	4413      	add	r3, r2
 8009700:	3354      	adds	r3, #84	; 0x54
 8009702:	78ba      	ldrb	r2, [r7, #2]
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	e008      	b.n	800971a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009708:	78fb      	ldrb	r3, [r7, #3]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	212c      	movs	r1, #44	; 0x2c
 800970e:	fb01 f303 	mul.w	r3, r1, r3
 8009712:	4413      	add	r3, r2
 8009714:	3355      	adds	r3, #85	; 0x55
 8009716:	78ba      	ldrb	r2, [r7, #2]
 8009718:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7f7 fe4b 	bl	80013cc <HAL_Delay>
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	2b03      	cmp	r3, #3
 8009752:	d817      	bhi.n	8009784 <USBH_Get_USB_Status+0x44>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <USBH_Get_USB_Status+0x1c>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	0800976d 	.word	0x0800976d
 8009760:	08009773 	.word	0x08009773
 8009764:	08009779 	.word	0x08009779
 8009768:	0800977f 	.word	0x0800977f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
    break;
 8009770:	e00b      	b.n	800978a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	73fb      	strb	r3, [r7, #15]
    break;
 8009776:	e008      	b.n	800978a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e005      	b.n	800978a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800977e:	2302      	movs	r3, #2
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	e002      	b.n	800978a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009784:	2302      	movs	r3, #2
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	bf00      	nop
  }
  return usb_status;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	e001      	b.n	80097b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80097b2:	2301      	movs	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	461a      	mov	r2, r3
 80097ba:	2101      	movs	r1, #1
 80097bc:	4803      	ldr	r0, [pc, #12]	; (80097cc <MX_DriverVbusFS+0x34>)
 80097be:	f7f8 f8ef 	bl	80019a0 <HAL_GPIO_WritePin>
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40020800 	.word	0x40020800

080097d0 <__errno>:
 80097d0:	4b01      	ldr	r3, [pc, #4]	; (80097d8 <__errno+0x8>)
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20000034 	.word	0x20000034

080097dc <__libc_init_array>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	4d0d      	ldr	r5, [pc, #52]	; (8009814 <__libc_init_array+0x38>)
 80097e0:	4c0d      	ldr	r4, [pc, #52]	; (8009818 <__libc_init_array+0x3c>)
 80097e2:	1b64      	subs	r4, r4, r5
 80097e4:	10a4      	asrs	r4, r4, #2
 80097e6:	2600      	movs	r6, #0
 80097e8:	42a6      	cmp	r6, r4
 80097ea:	d109      	bne.n	8009800 <__libc_init_array+0x24>
 80097ec:	4d0b      	ldr	r5, [pc, #44]	; (800981c <__libc_init_array+0x40>)
 80097ee:	4c0c      	ldr	r4, [pc, #48]	; (8009820 <__libc_init_array+0x44>)
 80097f0:	f000 f92e 	bl	8009a50 <_init>
 80097f4:	1b64      	subs	r4, r4, r5
 80097f6:	10a4      	asrs	r4, r4, #2
 80097f8:	2600      	movs	r6, #0
 80097fa:	42a6      	cmp	r6, r4
 80097fc:	d105      	bne.n	800980a <__libc_init_array+0x2e>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	f855 3b04 	ldr.w	r3, [r5], #4
 8009804:	4798      	blx	r3
 8009806:	3601      	adds	r6, #1
 8009808:	e7ee      	b.n	80097e8 <__libc_init_array+0xc>
 800980a:	f855 3b04 	ldr.w	r3, [r5], #4
 800980e:	4798      	blx	r3
 8009810:	3601      	adds	r6, #1
 8009812:	e7f2      	b.n	80097fa <__libc_init_array+0x1e>
 8009814:	08009aec 	.word	0x08009aec
 8009818:	08009aec 	.word	0x08009aec
 800981c:	08009aec 	.word	0x08009aec
 8009820:	08009af0 	.word	0x08009af0

08009824 <malloc>:
 8009824:	4b02      	ldr	r3, [pc, #8]	; (8009830 <malloc+0xc>)
 8009826:	4601      	mov	r1, r0
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	f000 b87f 	b.w	800992c <_malloc_r>
 800982e:	bf00      	nop
 8009830:	20000034 	.word	0x20000034

08009834 <free>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <free+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f000 b80b 	b.w	8009854 <_free_r>
 800983e:	bf00      	nop
 8009840:	20000034 	.word	0x20000034

08009844 <memset>:
 8009844:	4402      	add	r2, r0
 8009846:	4603      	mov	r3, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>

08009854 <_free_r>:
 8009854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009856:	2900      	cmp	r1, #0
 8009858:	d044      	beq.n	80098e4 <_free_r+0x90>
 800985a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985e:	9001      	str	r0, [sp, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f1a1 0404 	sub.w	r4, r1, #4
 8009866:	bfb8      	it	lt
 8009868:	18e4      	addlt	r4, r4, r3
 800986a:	f000 f8e5 	bl	8009a38 <__malloc_lock>
 800986e:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <_free_r+0x94>)
 8009870:	9801      	ldr	r0, [sp, #4]
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	b933      	cbnz	r3, 8009884 <_free_r+0x30>
 8009876:	6063      	str	r3, [r4, #4]
 8009878:	6014      	str	r4, [r2, #0]
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009880:	f000 b8e0 	b.w	8009a44 <__malloc_unlock>
 8009884:	42a3      	cmp	r3, r4
 8009886:	d908      	bls.n	800989a <_free_r+0x46>
 8009888:	6825      	ldr	r5, [r4, #0]
 800988a:	1961      	adds	r1, r4, r5
 800988c:	428b      	cmp	r3, r1
 800988e:	bf01      	itttt	eq
 8009890:	6819      	ldreq	r1, [r3, #0]
 8009892:	685b      	ldreq	r3, [r3, #4]
 8009894:	1949      	addeq	r1, r1, r5
 8009896:	6021      	streq	r1, [r4, #0]
 8009898:	e7ed      	b.n	8009876 <_free_r+0x22>
 800989a:	461a      	mov	r2, r3
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	b10b      	cbz	r3, 80098a4 <_free_r+0x50>
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	d9fa      	bls.n	800989a <_free_r+0x46>
 80098a4:	6811      	ldr	r1, [r2, #0]
 80098a6:	1855      	adds	r5, r2, r1
 80098a8:	42a5      	cmp	r5, r4
 80098aa:	d10b      	bne.n	80098c4 <_free_r+0x70>
 80098ac:	6824      	ldr	r4, [r4, #0]
 80098ae:	4421      	add	r1, r4
 80098b0:	1854      	adds	r4, r2, r1
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	6011      	str	r1, [r2, #0]
 80098b6:	d1e0      	bne.n	800987a <_free_r+0x26>
 80098b8:	681c      	ldr	r4, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	6053      	str	r3, [r2, #4]
 80098be:	4421      	add	r1, r4
 80098c0:	6011      	str	r1, [r2, #0]
 80098c2:	e7da      	b.n	800987a <_free_r+0x26>
 80098c4:	d902      	bls.n	80098cc <_free_r+0x78>
 80098c6:	230c      	movs	r3, #12
 80098c8:	6003      	str	r3, [r0, #0]
 80098ca:	e7d6      	b.n	800987a <_free_r+0x26>
 80098cc:	6825      	ldr	r5, [r4, #0]
 80098ce:	1961      	adds	r1, r4, r5
 80098d0:	428b      	cmp	r3, r1
 80098d2:	bf04      	itt	eq
 80098d4:	6819      	ldreq	r1, [r3, #0]
 80098d6:	685b      	ldreq	r3, [r3, #4]
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	bf04      	itt	eq
 80098dc:	1949      	addeq	r1, r1, r5
 80098de:	6021      	streq	r1, [r4, #0]
 80098e0:	6054      	str	r4, [r2, #4]
 80098e2:	e7ca      	b.n	800987a <_free_r+0x26>
 80098e4:	b003      	add	sp, #12
 80098e6:	bd30      	pop	{r4, r5, pc}
 80098e8:	20000914 	.word	0x20000914

080098ec <sbrk_aligned>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4e0e      	ldr	r6, [pc, #56]	; (8009928 <sbrk_aligned+0x3c>)
 80098f0:	460c      	mov	r4, r1
 80098f2:	6831      	ldr	r1, [r6, #0]
 80098f4:	4605      	mov	r5, r0
 80098f6:	b911      	cbnz	r1, 80098fe <sbrk_aligned+0x12>
 80098f8:	f000 f88c 	bl	8009a14 <_sbrk_r>
 80098fc:	6030      	str	r0, [r6, #0]
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f000 f887 	bl	8009a14 <_sbrk_r>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d00a      	beq.n	8009920 <sbrk_aligned+0x34>
 800990a:	1cc4      	adds	r4, r0, #3
 800990c:	f024 0403 	bic.w	r4, r4, #3
 8009910:	42a0      	cmp	r0, r4
 8009912:	d007      	beq.n	8009924 <sbrk_aligned+0x38>
 8009914:	1a21      	subs	r1, r4, r0
 8009916:	4628      	mov	r0, r5
 8009918:	f000 f87c 	bl	8009a14 <_sbrk_r>
 800991c:	3001      	adds	r0, #1
 800991e:	d101      	bne.n	8009924 <sbrk_aligned+0x38>
 8009920:	f04f 34ff 	mov.w	r4, #4294967295
 8009924:	4620      	mov	r0, r4
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	20000918 	.word	0x20000918

0800992c <_malloc_r>:
 800992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	1ccd      	adds	r5, r1, #3
 8009932:	f025 0503 	bic.w	r5, r5, #3
 8009936:	3508      	adds	r5, #8
 8009938:	2d0c      	cmp	r5, #12
 800993a:	bf38      	it	cc
 800993c:	250c      	movcc	r5, #12
 800993e:	2d00      	cmp	r5, #0
 8009940:	4607      	mov	r7, r0
 8009942:	db01      	blt.n	8009948 <_malloc_r+0x1c>
 8009944:	42a9      	cmp	r1, r5
 8009946:	d905      	bls.n	8009954 <_malloc_r+0x28>
 8009948:	230c      	movs	r3, #12
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	2600      	movs	r6, #0
 800994e:	4630      	mov	r0, r6
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	4e2e      	ldr	r6, [pc, #184]	; (8009a10 <_malloc_r+0xe4>)
 8009956:	f000 f86f 	bl	8009a38 <__malloc_lock>
 800995a:	6833      	ldr	r3, [r6, #0]
 800995c:	461c      	mov	r4, r3
 800995e:	bb34      	cbnz	r4, 80099ae <_malloc_r+0x82>
 8009960:	4629      	mov	r1, r5
 8009962:	4638      	mov	r0, r7
 8009964:	f7ff ffc2 	bl	80098ec <sbrk_aligned>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	4604      	mov	r4, r0
 800996c:	d14d      	bne.n	8009a0a <_malloc_r+0xde>
 800996e:	6834      	ldr	r4, [r6, #0]
 8009970:	4626      	mov	r6, r4
 8009972:	2e00      	cmp	r6, #0
 8009974:	d140      	bne.n	80099f8 <_malloc_r+0xcc>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	4631      	mov	r1, r6
 800997a:	4638      	mov	r0, r7
 800997c:	eb04 0803 	add.w	r8, r4, r3
 8009980:	f000 f848 	bl	8009a14 <_sbrk_r>
 8009984:	4580      	cmp	r8, r0
 8009986:	d13a      	bne.n	80099fe <_malloc_r+0xd2>
 8009988:	6821      	ldr	r1, [r4, #0]
 800998a:	3503      	adds	r5, #3
 800998c:	1a6d      	subs	r5, r5, r1
 800998e:	f025 0503 	bic.w	r5, r5, #3
 8009992:	3508      	adds	r5, #8
 8009994:	2d0c      	cmp	r5, #12
 8009996:	bf38      	it	cc
 8009998:	250c      	movcc	r5, #12
 800999a:	4629      	mov	r1, r5
 800999c:	4638      	mov	r0, r7
 800999e:	f7ff ffa5 	bl	80098ec <sbrk_aligned>
 80099a2:	3001      	adds	r0, #1
 80099a4:	d02b      	beq.n	80099fe <_malloc_r+0xd2>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	442b      	add	r3, r5
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	e00e      	b.n	80099cc <_malloc_r+0xa0>
 80099ae:	6822      	ldr	r2, [r4, #0]
 80099b0:	1b52      	subs	r2, r2, r5
 80099b2:	d41e      	bmi.n	80099f2 <_malloc_r+0xc6>
 80099b4:	2a0b      	cmp	r2, #11
 80099b6:	d916      	bls.n	80099e6 <_malloc_r+0xba>
 80099b8:	1961      	adds	r1, r4, r5
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	6025      	str	r5, [r4, #0]
 80099be:	bf18      	it	ne
 80099c0:	6059      	strne	r1, [r3, #4]
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	bf08      	it	eq
 80099c6:	6031      	streq	r1, [r6, #0]
 80099c8:	5162      	str	r2, [r4, r5]
 80099ca:	604b      	str	r3, [r1, #4]
 80099cc:	4638      	mov	r0, r7
 80099ce:	f104 060b 	add.w	r6, r4, #11
 80099d2:	f000 f837 	bl	8009a44 <__malloc_unlock>
 80099d6:	f026 0607 	bic.w	r6, r6, #7
 80099da:	1d23      	adds	r3, r4, #4
 80099dc:	1af2      	subs	r2, r6, r3
 80099de:	d0b6      	beq.n	800994e <_malloc_r+0x22>
 80099e0:	1b9b      	subs	r3, r3, r6
 80099e2:	50a3      	str	r3, [r4, r2]
 80099e4:	e7b3      	b.n	800994e <_malloc_r+0x22>
 80099e6:	6862      	ldr	r2, [r4, #4]
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	bf0c      	ite	eq
 80099ec:	6032      	streq	r2, [r6, #0]
 80099ee:	605a      	strne	r2, [r3, #4]
 80099f0:	e7ec      	b.n	80099cc <_malloc_r+0xa0>
 80099f2:	4623      	mov	r3, r4
 80099f4:	6864      	ldr	r4, [r4, #4]
 80099f6:	e7b2      	b.n	800995e <_malloc_r+0x32>
 80099f8:	4634      	mov	r4, r6
 80099fa:	6876      	ldr	r6, [r6, #4]
 80099fc:	e7b9      	b.n	8009972 <_malloc_r+0x46>
 80099fe:	230c      	movs	r3, #12
 8009a00:	603b      	str	r3, [r7, #0]
 8009a02:	4638      	mov	r0, r7
 8009a04:	f000 f81e 	bl	8009a44 <__malloc_unlock>
 8009a08:	e7a1      	b.n	800994e <_malloc_r+0x22>
 8009a0a:	6025      	str	r5, [r4, #0]
 8009a0c:	e7de      	b.n	80099cc <_malloc_r+0xa0>
 8009a0e:	bf00      	nop
 8009a10:	20000914 	.word	0x20000914

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	; (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f7 fbf0 	bl	8001204 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20000920 	.word	0x20000920

08009a34 <__retarget_lock_acquire_recursive>:
 8009a34:	4770      	bx	lr

08009a36 <__retarget_lock_release_recursive>:
 8009a36:	4770      	bx	lr

08009a38 <__malloc_lock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__malloc_lock+0x8>)
 8009a3a:	f7ff bffb 	b.w	8009a34 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	2000091c 	.word	0x2000091c

08009a44 <__malloc_unlock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_unlock+0x8>)
 8009a46:	f7ff bff6 	b.w	8009a36 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	2000091c 	.word	0x2000091c

08009a50 <_init>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	bf00      	nop
 8009a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a56:	bc08      	pop	{r3}
 8009a58:	469e      	mov	lr, r3
 8009a5a:	4770      	bx	lr

08009a5c <_fini>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr
